{"ast":null,"code":"import * as uuid from \"uuid\";\nimport { adminApi } from \"../../Api/Api\";\nlet initialState = {\n  ArrayFolders: []\n};\nexport const folderReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"setFromDB\":\n      return { ...state,\n        ArrayFolders: action.folderData\n      };\n\n    case \"deleteId\":\n      //debugger;\n      return { ...state,\n        ArrayFolders: state.ArrayFolders.map(u => {\n          if (u._id === action.folderID) {\n            return { ...u,\n              Cars: u.Cars.filter(f => f.id != action.productID)\n            };\n          }\n\n          return { ...u,\n            ...u.Cars\n          };\n        })\n      };\n\n    case \"addNewFolder\":\n      return { ...state,\n        ArrayFolders: [...state.ArrayFolders, action.folderData]\n      };\n\n    case \"changeName\":\n      return { ...state,\n        ArrayFolders: state.ArrayFolders.map(u => {\n          if (u._id === action.folderId) {\n            return { ...u,\n              nameOfFolder: action.folderName\n            };\n          }\n\n          return { ...u\n          };\n        })\n      };\n\n    case \"iqura/folder/setCarToTheFolder\":\n      return { ...state,\n        ArrayFolders: state.ArrayFolders.map(u => {\n          if (u._id === action.folderId) {\n            return { ...u,\n              Cars: [...u.Cars, action.carFull]\n            };\n          }\n\n          return { ...u,\n            ...u.Cars\n          };\n        })\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  deleteId: (folderID, productID) => ({\n    type: 'deleteId',\n    folderID,\n    productID\n  }),\n  addNewFolder: folderData => ({\n    type: 'addNewFolder',\n    folderData\n  }),\n  setFromDB: folderData => ({\n    type: 'setFromDB',\n    folderData\n  }),\n  changeName: (folderId, folderName) => ({\n    type: 'changeName',\n    folderId,\n    folderName\n  }),\n  setCarToTheFolder: (folderId, carFull) => ({\n    type: 'iqura/folder/setCarToTheFolder',\n    folderId,\n    carFull\n  })\n};\nexport const setCarToFolderThunk = (folderId, carId) => async (dispatch, getState) => {\n  let newId = uuid.v4();\n  let car = {\n    id: newId,\n    number: carId\n  };\n  dispatch(actions.setCarToTheFolder(folderId, car));\n};\nexport const setCarFromDB = () => async (dispatch, getState) => {\n  const car = await adminApi.getGoods();\n  dispatch(actions.setFromDB(car));\n};\nexport const addNewFolder = data => async (dispatch, getState) => {\n  const car = await adminApi.addNewFolder(data);\n  dispatch(actions.addNewFolder(car));\n};\nexport const chnageNameFolderThunk = (folderId, folderName) => async (dispatch, getState) => {\n  dispatch(actions.changeName(folderId, folderName));\n  const car = await getState().folderPage.ArrayFolders.find(f => f._id == folderId);\n  console.log(car);\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/folderPageReducer.ts"],"names":["uuid","adminApi","initialState","ArrayFolders","folderReducer","state","action","type","folderData","map","u","_id","folderID","Cars","filter","f","id","productID","folderId","nameOfFolder","folderName","carFull","actions","deleteId","addNewFolder","setFromDB","changeName","setCarToTheFolder","setCarToFolderThunk","carId","dispatch","getState","newId","v4","car","number","setCarFromDB","getGoods","data","chnageNameFolderThunk","folderPage","find","console","log"],"mappings":"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","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\nimport * as uuid from \"uuid\";\nimport {adminApi} from \"../../Api/Api\";\n\ninterface infoType {\n    id: string,\n    number: number\n}\n\nexport interface cars {\n    _id: string\n    mainImg: string,\n    nameOfFolder: string,\n    Cars: Array<infoType>\n}\n\nlet initialState = {\n    ArrayFolders: [] as Array<cars>\n}\ntype InitialState = typeof initialState;\nexport const folderReducer = (state = initialState, action: ActionsTypes): InitialState => {\n\n    switch (action.type) {\n        case \"setFromDB\":\n            return {\n                ...state,\n                ArrayFolders: action.folderData\n            }\n        case \"deleteId\":\n            //debugger;\n            return {\n                ...state,\n                ArrayFolders: state.ArrayFolders.map(u => {\n                    if (u._id === action.folderID) {\n                        return {...u, Cars: u.Cars.filter(f => f.id != action.productID)}\n                    }\n                    return {...u, ...u.Cars};\n                })\n            }\n        case \"addNewFolder\":\n            return {\n                ...state,\n                ArrayFolders: [...state.ArrayFolders, action.folderData],\n            }\n        case \"changeName\":\n            return {\n                ...state,\n                ArrayFolders: state.ArrayFolders.map(u => {\n                    if (u._id === action.folderId) {\n                        return {...u, nameOfFolder: action.folderName};\n                    }\n                    return {...u};\n                })\n            }\n        case \"iqura/folder/setCarToTheFolder\":\n            return{\n                ...state,\n                ArrayFolders: state.ArrayFolders.map( u=>{\n                    if(u._id === action.folderId){\n                        return{...u, Cars: [...u.Cars,action.carFull]}\n                    }\n                    return{...u, ...u.Cars};\n                })\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    deleteId: (folderID: string, productID: string) => ({type: 'deleteId', folderID, productID} as const),\n    addNewFolder: (folderData: cars) => ({type: 'addNewFolder', folderData} as const),\n    setFromDB: (folderData: Array<cars>) => ({type: 'setFromDB', folderData} as const),\n    changeName: (folderId: string, folderName: string) => ({type: 'changeName', folderId, folderName} as const),\n    setCarToTheFolder: (folderId: string, carFull: infoType) => ({type: 'iqura/folder/setCarToTheFolder', folderId, carFull} as const),\n\n}\nexport const setCarToFolderThunk = (folderId: string,carId:number):ThunkType => async (dispatch,getState) =>{\n    let newId = uuid.v4();\n    let car = {id: newId, number: carId};\n    dispatch(actions.setCarToTheFolder(folderId, car));\n\n}\nexport const setCarFromDB = ():ThunkType => async (dispatch,getState) =>{\n    const car = await adminApi.getGoods()\n    dispatch(actions.setFromDB(car));\n}\nexport const addNewFolder = (data:any):ThunkType => async (dispatch,getState) =>{\n    const car = await adminApi.addNewFolder(data);\n    dispatch(actions.addNewFolder(car));\n}\nexport const chnageNameFolderThunk = (folderId:string,folderName:string):ThunkType => async (dispatch,getState) =>{\n    dispatch(actions.changeName(folderId,folderName));\n    const car = await getState().folderPage.ArrayFolders.find(f => f._id == folderId);\n    console.log(car);\n}\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}