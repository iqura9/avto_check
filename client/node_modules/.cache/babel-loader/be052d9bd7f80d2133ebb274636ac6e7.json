{"ast":null,"code":"import { adminApi } from \"../../Api/Api\";\nlet initialState = {\n  ArrayFolders: []\n};\nexport const adminFolderReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"setFromAdnimDB\":\n      return { ...state,\n        ArrayFolders: action.folderData\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setFromAdnimDB: folderData => ({\n    type: 'setFromAdnimDB',\n    folderData\n  })\n};\nexport const setAdminFolderToRedux = () => async (dispatch, getState) => {\n  const car = await adminApi.getGoods();\n  dispatch(actions.setFromAdnimDB(car));\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/adminFolderPageReducer.ts"],"names":["adminApi","initialState","ArrayFolders","adminFolderReducer","state","action","type","folderData","actions","setFromAdnimDB","setAdminFolderToRedux","dispatch","getState","car","getGoods"],"mappings":"AAEA,SAAQA,QAAR,QAAuB,eAAvB;AAcA,IAAIC,YAAY,GAAG;AACfC,EAAAA,YAAY,EAAE;AADC,CAAnB;AAIA,OAAO,MAAMC,kBAAkB,GAAG,YAA8D;AAAA,MAA7DC,KAA6D,uEAArDH,YAAqD;AAAA,MAAvCI,MAAuC;;AAE5F,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,gBAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHF,QAAAA,YAAY,EAAEG,MAAM,CAACE;AAFlB,OAAP;;AAIJ;AAAS;AACL,eAAOH,KAAP;AACH;AARL;AAUH,CAZM;AAcP,OAAO,MAAMI,OAAO,GAAG;AACnBC,EAAAA,cAAc,EAAGF,UAAD,KAA8B;AAACD,IAAAA,IAAI,EAAE,gBAAP;AAAyBC,IAAAA;AAAzB,GAA9B;AADG,CAAhB;AAIP,OAAO,MAAMG,qBAAqB,GAAG,MAAgB,OAAOC,QAAP,EAAgBC,QAAhB,KAA4B;AAC7E,QAAMC,GAAG,GAAG,MAAMb,QAAQ,CAACc,QAAT,EAAlB;AACAH,EAAAA,QAAQ,CAACH,OAAO,CAACC,cAAR,CAAuBI,GAAvB,CAAD,CAAR;AACH,CAHM","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\nimport * as uuid from \"uuid\";\nimport {adminApi} from \"../../Api/Api\";\n\ninterface infoType {\n    id: string,\n    number: number\n}\n\nexport interface cars {\n    _id: string\n    mainImg: string,\n    nameOfFolder: string,\n    Cars: Array<infoType>\n}\n\nlet initialState = {\n    ArrayFolders: [] as Array<cars>\n}\ntype InitialState = typeof initialState;\nexport const adminFolderReducer = (state = initialState, action: ActionsTypes): InitialState => {\n\n    switch (action.type) {\n        case \"setFromAdnimDB\":\n            return {\n                ...state,\n                ArrayFolders: action.folderData\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    setFromAdnimDB: (folderData: Array<cars>) => ({type: 'setFromAdnimDB', folderData} as const),\n}\n\nexport const setAdminFolderToRedux = ():ThunkType => async (dispatch,getState) =>{\n    const car = await adminApi.getGoods();\n    dispatch(actions.setFromAdnimDB(car));\n}\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}