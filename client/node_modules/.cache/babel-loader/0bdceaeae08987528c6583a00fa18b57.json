{"ast":null,"code":"import { adminApi } from \"../../Api/Api\";\nlet initialState = {\n  email: '',\n  avatar: null,\n  avatarId: null,\n  lastName: '',\n  firstName: '',\n  gender: null,\n  address: null,\n  profession: '',\n  searchField: '',\n  phone: '',\n  roles: ''\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"SET_AUTH_USER\":\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setAuthUserAC: payload => ({\n    type: 'SET_AUTH_USER',\n    payload\n  })\n};\nexport const authMeTC = () => async dispatch => {\n  const storedProfile = await JSON.parse(localStorage.getItem(\"profile\") || '');\n  dispatch(actions.setAuthUserAC(storedProfile));\n};\nexport const deleteProfileTC = () => async dispatch => {\n  let clearProfile = {\n    email: '',\n    avatar: null,\n    avatarId: null,\n    lastName: '',\n    firstName: '',\n    gender: null,\n    address: null,\n    profession: '',\n    searchField: '',\n    phone: '',\n    roles: ''\n  };\n};\nexport const loginTC = (data, history) => async dispatch => {\n  try {\n    let response = await adminApi.loginMe(data);\n    await localStorage.setItem(\"profile\", JSON.stringify(response));\n    dispatch(authMeTC());\n    history.push({\n      pathname: '/'\n    });\n  } catch (e) {\n    console.log(\"FUCK\");\n  }\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/authReducer.ts"],"names":["adminApi","initialState","email","avatar","avatarId","lastName","firstName","gender","address","profession","searchField","phone","roles","authReducer","state","action","type","payload","actions","setAuthUserAC","authMeTC","dispatch","storedProfile","JSON","parse","localStorage","getItem","deleteProfileTC","clearProfile","loginTC","data","history","response","loginMe","setItem","stringify","push","pathname","e","console","log"],"mappings":"AACA,SAAQA,QAAR,QAAuB,eAAvB;AASA,IAAIC,YAAY,GAAG;AACXC,EAAAA,KAAK,EAAE,EADI;AAEXC,EAAAA,MAAM,EAAE,IAFG;AAGXC,EAAAA,QAAQ,EAAE,IAHC;AAIXC,EAAAA,QAAQ,EAAE,EAJC;AAKXC,EAAAA,SAAS,EAAE,EALA;AAMXC,EAAAA,MAAM,EAAE,IANG;AAOXC,EAAAA,OAAO,EAAE,IAPE;AAQXC,EAAAA,UAAU,EAAE,EARD;AASXC,EAAAA,WAAW,EAAE,EATF;AAUXC,EAAAA,KAAK,EAAE,EAVI;AAWXC,EAAAA,KAAK,EAAE;AAXI,CAAnB;AAeA,OAAO,MAAMC,WAAW,GAAG,YAAkE;AAAA,MAAjEC,KAAiE,uEAAzDb,YAAyD;AAAA,MAA3Cc,MAA2C;;AAEzF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,eAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AAAS;AACL,eAAOH,KAAP;AACH;AARL;AAUH,CAZM;AAcP,OAAO,MAAMI,OAAO,GAAG;AACnBC,EAAAA,aAAa,EAAGF,OAAD,KAAgC;AAACD,IAAAA,IAAI,EAAE,eAAP;AAAwBC,IAAAA;AAAxB,GAAhC;AADI,CAAhB;AAGP,OAAO,MAAMG,QAAQ,GAAG,MAAiB,MAAOC,QAAP,IAAyB;AAC9D,QAAMC,aAAa,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,KAAmC,EAA9C,CAA5B;AACAL,EAAAA,QAAQ,CAACH,OAAO,CAACC,aAAR,CAAsBG,aAAtB,CAAD,CAAR;AACH,CAHM;AAIP,OAAO,MAAMK,eAAe,GAAG,MAAiB,MAAON,QAAP,IAAyB;AACrE,MAAIO,YAAY,GAAC;AACb1B,IAAAA,KAAK,EAAE,EADM;AAEbC,IAAAA,MAAM,EAAE,IAFK;AAGbC,IAAAA,QAAQ,EAAE,IAHG;AAIbC,IAAAA,QAAQ,EAAE,EAJG;AAKbC,IAAAA,SAAS,EAAE,EALE;AAMbC,IAAAA,MAAM,EAAE,IANK;AAObC,IAAAA,OAAO,EAAE,IAPI;AAQbC,IAAAA,UAAU,EAAE,EARC;AASbC,IAAAA,WAAW,EAAE,EATA;AAUbC,IAAAA,KAAK,EAAE,EAVM;AAWbC,IAAAA,KAAK,EAAE;AAXM,GAAjB;AAaH,CAdM;AAgBP,OAAO,MAAMiB,OAAO,GAAG,CAACC,IAAD,EAA2CC,OAA3C,KAAsE,MAAOV,QAAP,IAAyB;AAClH,MAAI;AACA,QAAIW,QAAQ,GAAG,MAAMhC,QAAQ,CAACiC,OAAT,CAAiBH,IAAjB,CAArB;AACA,UAAML,YAAY,CAACS,OAAb,CAAqB,SAArB,EAAgCX,IAAI,CAACY,SAAL,CAAeH,QAAf,CAAhC,CAAN;AACAX,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACAW,IAAAA,OAAO,CAACK,IAAR,CAAa;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAAb;AACH,GALD,CAKE,OAAOC,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH;AACJ,CATM","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\nimport {adminApi} from \"../../Api/Api\";\n\ninterface IAddress {\n    country: string | null;\n    city: string | null;\n    addressLine1: string | null;\n    addressLine2: string | null;\n}\n\nlet initialState = {\n        email: '' as string,\n        avatar: null as null | string,\n        avatarId: null as null | string,\n        lastName: '' as string,\n        firstName: '' as string,\n        gender: null as null | string,\n        address: null as null | IAddress,\n        profession: '' as string,\n        searchField: '' as string,\n        phone: '' as string,\n        roles: '' as string | Array<string>,\n}\n\ntype initialStateType = typeof initialState;\nexport const authReducer = (state = initialState, action: ActionsTypes): initialStateType => {\n\n    switch (action.type) {\n        case \"SET_AUTH_USER\":\n            return {\n                ...state,\n                ...action.payload\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    setAuthUserAC: (payload: initialStateType) => ({type: 'SET_AUTH_USER', payload} as const),\n}\nexport const authMeTC = (): ThunkType => async (dispatch: any) => {\n    const storedProfile = await JSON.parse(localStorage.getItem(\"profile\") || '');\n    dispatch(actions.setAuthUserAC(storedProfile));\n}\nexport const deleteProfileTC = (): ThunkType => async (dispatch: any) => {\n    let clearProfile={\n        email: '',\n        avatar: null,\n        avatarId: null,\n        lastName: '',\n        firstName: '',\n        gender: null,\n        address: null,\n        profession: '',\n        searchField: '',\n        phone: '',\n        roles: '',\n    }\n}\n\nexport const loginTC = (data: { email: string, password: string },history:any): ThunkType => async (dispatch: any) => {\n    try {\n        let response = await adminApi.loginMe(data);\n        await localStorage.setItem(\"profile\", JSON.stringify(response));\n        dispatch(authMeTC());\n        history.push({pathname: '/'});\n    } catch (e) {\n        console.log(\"FUCK\");\n    }\n}\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}