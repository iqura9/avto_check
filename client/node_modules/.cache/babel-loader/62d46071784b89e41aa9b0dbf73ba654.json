{"ast":null,"code":"import { adminApi } from \"../../Api/Api\";\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setAuthUserAC: () => ({\n    type: 'newURL'\n  })\n};\nexport const authMeTC = () => {\n  return async dispatch => {\n    let response = await usersAuthApi.authMe();\n\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data.data;\n      dispatch(setAuthUserAC(id, email, login, true));\n    }\n  };\n};\nexport const loginTC = (email, password, rememberMe, captcha) => async dispatch => {\n  let response = await adminApi.loginMe(email, password);\n  if (response.data.resultCode === 0) dispatch(authMeTC());else {\n    if (response.data.resultCode === 10) dispatch(getCaptchaTC());\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some Error\";\n    let action = stopSubmit(\"login\", {\n      _error: message\n    });\n    dispatch(action);\n  }\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/authReducer.ts"],"names":["adminApi","initialState","id","email","login","isAuth","authReducer","state","action","type","actions","setAuthUserAC","authMeTC","dispatch","response","usersAuthApi","authMe","data","resultCode","loginTC","password","rememberMe","captcha","loginMe","getCaptchaTC","message","messages","length","stopSubmit","_error"],"mappings":"AACA,SAAQA,QAAR,QAAuB,eAAvB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;AAQA,OAAO,MAAMC,WAAW,GAAG,YAA6D;AAAA,MAA5DC,KAA4D,uEAAtDN,YAAsD;AAAA,MAAxCO,MAAwC;;AAEpF,UAAQA,MAAM,CAACC,IAAf;AACI;AAAS;AACL,eAAOF,KAAP;AACH;AAHL;AAKH,CAPM;AASP,OAAO,MAAMG,OAAO,GAAG;AACnBC,EAAAA,aAAa,EAAG,OAAO;AAACF,IAAAA,IAAI,EAAE;AAAP,GAAP;AADG,CAAhB;AAGP,OAAO,MAAMG,QAAQ,GAAG,MAAK;AACzB,SAAO,MAAOC,QAAP,IAAuB;AAC1B,QAAIC,QAAQ,GAAG,MAAMC,YAAY,CAACC,MAAb,EAArB;;AACA,QAAGF,QAAQ,CAACG,IAAT,CAAcC,UAAd,KAA2B,CAA9B,EAAiC;AAC7B,UAAI;AAAChB,QAAAA,EAAD;AAAKC,QAAAA,KAAL;AAAWC,QAAAA;AAAX,UAAoBU,QAAQ,CAACG,IAAT,CAAcA,IAAtC;AACAJ,MAAAA,QAAQ,CAACF,aAAa,CAACT,EAAD,EAAIC,KAAJ,EAAUC,KAAV,EAAgB,IAAhB,CAAd,CAAR;AACH;AACJ,GAND;AAOH,CARM;AASP,OAAO,MAAMe,OAAO,GAAG,CAAChB,KAAD,EAAeiB,QAAf,EAAgCC,UAAhC,EAAoDC,OAApD,KAAuE,MAAOT,QAAP,IAAwB;AAClH,MAAIC,QAAQ,GAAG,MAAMd,QAAQ,CAACuB,OAAT,CAAiBpB,KAAjB,EAAwBiB,QAAxB,CAArB;AACA,MAAIN,QAAQ,CAACG,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoCL,QAAQ,CAACD,QAAQ,EAAT,CAAR,CAApC,KACK;AACD,QAAIE,QAAQ,CAACG,IAAT,CAAcC,UAAd,KAA6B,EAAjC,EAAqCL,QAAQ,CAACW,YAAY,EAAb,CAAR;AACrC,QAAIC,OAAO,GAAGX,QAAQ,CAACG,IAAT,CAAcS,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCb,QAAQ,CAACG,IAAT,CAAcS,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAA9E;AACA,QAAIlB,MAAM,GAAGoB,UAAU,CAAC,OAAD,EAAU;AAACC,MAAAA,MAAM,EAAEJ;AAAT,KAAV,CAAvB;AACAZ,IAAAA,QAAQ,CAACL,MAAD,CAAR;AACH;AACJ,CATM","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\nimport {adminApi} from \"../../Api/Api\";\n\nlet initialState = {\n    id: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false as boolean\n}\n\ntype initialStateType = typeof initialState;\nexport const authReducer = (state=initialState, action:ActionsTypes):initialStateType =>{\n\n    switch (action.type) {\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    setAuthUserAC : () => ({type: 'newURL' } as const),\n}\nexport const authMeTC = () =>{\n    return async (dispatch:any) =>{\n        let response = await usersAuthApi.authMe();\n        if(response.data.resultCode===0) {\n            let {id, email,login} = response.data.data;\n            dispatch(setAuthUserAC(id,email,login,true));\n        }\n    }\n}\nexport const loginTC = (email:string, password:string, rememberMe:boolean, captcha:string) => async (dispatch:any) => {\n    let response = await adminApi.loginMe(email, password);\n    if (response.data.resultCode === 0) dispatch(authMeTC());\n    else {\n        if (response.data.resultCode === 10) dispatch(getCaptchaTC());\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some Error\";\n        let action = stopSubmit(\"login\", {_error: message});\n        dispatch(action);\n    }\n}\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}