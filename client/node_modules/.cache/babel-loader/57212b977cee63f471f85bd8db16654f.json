{"ast":null,"code":"import axios from \"axios\";\nlet accessToken = JSON.parse(String(localStorage.getItem('profile')));\nconst instance = axios.create({\n  baseURL: 'http://192.168.0.3:9000/' //headers : {\"Authorization\": `Bearer ${ config && config.accessToken}`},\n\n});\ninstance.interceptors.request.use(config => {\n  //@ts-ignore\n  config.headers.Authorization = `Bearer ${accessToken && accessToken.accessToken}`;\n  return config;\n});\ninstance.interceptors.response.use(config => {\n  return config;\n}, async error => {\n  const originalRequest = error.config;\n\n  if (error.response.status == 401 && error.config && !error.config._isRetry) {\n    originalRequest._isRetry = true;\n\n    try {\n      const responce = await instance.post(`auth/refresh`, {\n        \"token\": accessToken.refreshToken\n      }).then(res => res.data.accessToken);\n      accessToken.accessToken = responce;\n      console.log(accessToken);\n      localStorage.setItem('profile', accessToken);\n      return instance.request(originalRequest);\n    } catch (e) {\n      console.log('НЕ АВТОРЕЗОВАН');\n    }\n  }\n\n  throw error;\n});\nexport const adminApi = {\n  getGoods() {\n    return instance.get(`api/cars`).then(res => res.data);\n  },\n\n  addNewFolder(data) {\n    return instance.post(`api/cars`, { ...data\n    }).then(res => res.data);\n  },\n\n  updateFolderName(id, data) {\n    return instance.put(`api/cars/${id}`, { ...data\n    }).then(res => res.data);\n  },\n\n  deleteFolder(id, userId) {\n    const mainId = `?id=${id}&userId=${userId}`;\n    return instance.delete(`api/cars${mainId}`).then(res => res.data);\n  },\n\n  loginMe(data) {\n    const {\n      email,\n      password\n    } = data;\n    return instance.post(`/auth/signIn`, {\n      email,\n      password\n    }).then(res => res.data);\n  },\n\n  signUp(data) {\n    return instance.post(`/auth/signUp`, data).then(res => res.data);\n  },\n\n  getFolders(id) {\n    return instance.get(`/api/users/${id}`).then(res => res.data);\n  },\n\n  addIdOfCar(data) {\n    return instance.post(`/api/users`, data).then(res => res.data);\n  }\n\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Api/Api.tsx"],"names":["axios","accessToken","JSON","parse","String","localStorage","getItem","instance","create","baseURL","interceptors","request","use","config","headers","Authorization","response","error","originalRequest","status","_isRetry","responce","post","refreshToken","then","res","data","console","log","setItem","e","adminApi","getGoods","get","addNewFolder","updateFolderName","id","put","deleteFolder","userId","mainId","delete","loginMe","email","password","signUp","getFolders","addIdOfCar"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {cars} from \"../Redux/reducers/folderPageReducer\";\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../Redux/Redux-store\";\nlet accessToken = JSON.parse(String(localStorage.getItem('profile')));\n\nconst instance = axios.create({\n    baseURL: 'http://192.168.0.3:9000/',\n    //headers : {\"Authorization\": `Bearer ${ config && config.accessToken}`},\n})\ninstance.interceptors.request.use((config) => {\n    //@ts-ignore\n    config.headers.Authorization = `Bearer ${ accessToken && accessToken.accessToken}`\n    return config;\n})\ninstance.interceptors.response.use((config)=>{\n    return config;\n},(async error => {\n    const originalRequest = error.config;\n    if(error.response.status == 401 && error.config && !error.config._isRetry){\n        originalRequest._isRetry = true;\n        try{\n            const responce = await instance.post(`auth/refresh`, {\"token\": accessToken.refreshToken}).then(res=> res.data.accessToken);\n            accessToken.accessToken = responce;\n            console.log(accessToken);\n            localStorage.setItem('profile', accessToken);\n            return instance.request(originalRequest);\n        } catch (e){\n            console.log('НЕ АВТОРЕЗОВАН')\n        }\n    }\n    throw error;\n}))\nexport const adminApi = {\n    getGoods() {\n        return instance.get<Array<cars>>(`api/cars`).then(res=> res.data);\n    },\n    addNewFolder(data:any){\n        return instance.post(`api/cars`, {...data}).then(res=>res.data);\n    },\n    updateFolderName(id:string,data:any){\n        return instance.put(`api/cars/${id}`, {...data}).then(res=>res.data);\n    },\n    deleteFolder(id:any, userId:any) {\n        const mainId= `?id=${id}&userId=${userId}`;\n        return instance.delete(`api/cars${mainId}`, ).then(res=> res.data);\n    },\n    loginMe(data:{email: string, password: string}) {\n        const {email,password} = data;\n        return instance.post(`/auth/signIn`, {email,password}).then(res=>res.data);\n    },\n    signUp(data:{email: string, password: string}) {\n        return instance.post(`/auth/signUp`, data).then(res=>res.data);\n    },\n    getFolders(id:string){\n        return instance.get(`/api/users/${id}`).then(res=>res.data);\n    },\n    addIdOfCar(data:any){\n        return instance.post(`/api/users`, data).then(res=>res.data);\n    }\n\n}"]},"metadata":{},"sourceType":"module"}