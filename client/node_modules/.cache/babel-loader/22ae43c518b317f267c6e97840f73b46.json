{"ast":null,"code":"import { adminApi } from \"../../Api/Api\";\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setAuthUserAC: () => ({\n    type: 'newURL'\n  })\n};\nexport const loginTC = (email, password, rememberMe, captcha) => async dispatch => {\n  let response = await adminApi.loginMe(email, password);\n  if (response.data.resultCode === 0) dispatch(authMeTC());else {\n    if (response.data.resultCode === 10) dispatch(getCaptchaTC());\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some Error\";\n    let action = stopSubmit(\"login\", {\n      _error: message\n    });\n    dispatch(action);\n  }\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/authReducer.ts"],"names":["adminApi","initialState","id","email","login","isAuth","authReducer","state","action","type","actions","setAuthUserAC","loginTC","password","rememberMe","captcha","dispatch","response","loginMe","data","resultCode","authMeTC","getCaptchaTC","message","messages","length","stopSubmit","_error"],"mappings":"AACA,SAAQA,QAAR,QAAuB,eAAvB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;AAQA,OAAO,MAAMC,WAAW,GAAG,YAA6D;AAAA,MAA5DC,KAA4D,uEAAtDN,YAAsD;AAAA,MAAxCO,MAAwC;;AAEpF,UAAQA,MAAM,CAACC,IAAf;AACI;AAAS;AACL,eAAOF,KAAP;AACH;AAHL;AAKH,CAPM;AASP,OAAO,MAAMG,OAAO,GAAG;AACnBC,EAAAA,aAAa,EAAG,OAAO;AAACF,IAAAA,IAAI,EAAE;AAAP,GAAP;AADG,CAAhB;AAIP,OAAO,MAAMG,OAAO,GAAG,CAACT,KAAD,EAAeU,QAAf,EAAgCC,UAAhC,EAAoDC,OAApD,KAAuE,MAAOC,QAAP,IAAwB;AAClH,MAAIC,QAAQ,GAAG,MAAMjB,QAAQ,CAACkB,OAAT,CAAiBf,KAAjB,EAAwBU,QAAxB,CAArB;AACA,MAAII,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoCJ,QAAQ,CAACK,QAAQ,EAAT,CAAR,CAApC,KACK;AACD,QAAIJ,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,EAAjC,EAAqCJ,QAAQ,CAACM,YAAY,EAAb,CAAR;AACrC,QAAIC,OAAO,GAAGN,QAAQ,CAACE,IAAT,CAAcK,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCR,QAAQ,CAACE,IAAT,CAAcK,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAA9E;AACA,QAAIhB,MAAM,GAAGkB,UAAU,CAAC,OAAD,EAAU;AAACC,MAAAA,MAAM,EAAEJ;AAAT,KAAV,CAAvB;AACAP,IAAAA,QAAQ,CAACR,MAAD,CAAR;AACH;AACJ,CATM","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\nimport {adminApi} from \"../../Api/Api\";\n\nlet initialState = {\n    id: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false as boolean\n}\n\ntype initialStateType = typeof initialState;\nexport const authReducer = (state=initialState, action:ActionsTypes):initialStateType =>{\n\n    switch (action.type) {\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    setAuthUserAC : () => ({type: 'newURL' } as const),\n}\n\nexport const loginTC = (email:string, password:string, rememberMe:boolean, captcha:string) => async (dispatch:any) => {\n    let response = await adminApi.loginMe(email, password);\n    if (response.data.resultCode === 0) dispatch(authMeTC());\n    else {\n        if (response.data.resultCode === 10) dispatch(getCaptchaTC());\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some Error\";\n        let action = stopSubmit(\"login\", {_error: message});\n        dispatch(action);\n    }\n}\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}