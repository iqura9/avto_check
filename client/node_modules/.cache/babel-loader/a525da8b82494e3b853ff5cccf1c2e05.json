{"ast":null,"code":"import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport { showReducer } from \"./reducers/showPageReducer\";\nimport * as thunk from \"redux-thunk\";\nimport { folderReducer } from \"./reducers/folderPageReducer\";\nimport { authReducer } from \"./reducers/authReducer\";\nimport { adminFolderReducer } from \"./reducers/adminFolderPageReducer\";\nlet RootReducers = combineReducers({\n  showPage: showReducer,\n  folderPage: folderReducer,\n  auth: authReducer,\n  adminFolderPage: adminFolderReducer\n});\nlet store = createStore(RootReducers, applyMiddleware(thunk.default)); // @ts-ignore\n\nwindow.store = store;\nexport default store;","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Redux/Redux-store.ts"],"names":["applyMiddleware","combineReducers","createStore","showReducer","thunk","folderReducer","authReducer","adminFolderReducer","RootReducers","showPage","folderPage","auth","adminFolderPage","store","default","window"],"mappings":"AAAA,SAAgBA,eAAhB,EAAiCC,eAAjC,EAAkDC,WAAlD,QAAoE,OAApE;AACA,SAAQC,WAAR,QAA0B,4BAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;AAEA,SAAQC,aAAR,QAA4B,8BAA5B;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,kBAAR,QAAiC,mCAAjC;AAEA,IAAIC,YAAY,GAAEP,eAAe,CAAC;AAC9BQ,EAAAA,QAAQ,EAAEN,WADoB;AAE9BO,EAAAA,UAAU,EAAEL,aAFkB;AAG9BM,EAAAA,IAAI,EAAEL,WAHwB;AAI9BM,EAAAA,eAAe,EAAEL;AAJa,CAAD,CAAjC;AAYA,IAAIM,KAAK,GAAGX,WAAW,CAACM,YAAD,EAAcR,eAAe,CAACI,KAAK,CAACU,OAAP,CAA7B,CAAvB,C,CACA;;AACAC,MAAM,CAACF,KAAP,GAAeA,KAAf;AAEA,eAAeA,KAAf","sourcesContent":["import {Action, applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {showReducer} from \"./reducers/showPageReducer\";\nimport * as thunk from \"redux-thunk\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {folderReducer} from \"./reducers/folderPageReducer\";\nimport {authReducer} from \"./reducers/authReducer\";\nimport {adminFolderReducer} from \"./reducers/adminFolderPageReducer\";\n\nlet RootReducers= combineReducers({\n    showPage: showReducer,\n    folderPage: folderReducer,\n    auth: authReducer,\n    adminFolderPage: adminFolderReducer\n});\n\ntype RootReducerType = typeof RootReducers;\nexport type AppStateType = ReturnType<RootReducerType>\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\nlet store = createStore(RootReducers,applyMiddleware(thunk.default));\n// @ts-ignore\nwindow.store = store;\n\nexport default store;"]},"metadata":{},"sourceType":"module"}