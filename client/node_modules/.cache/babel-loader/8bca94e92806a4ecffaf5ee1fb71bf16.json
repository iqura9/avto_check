{"ast":null,"code":"import { adminApi } from \"../../Api/Api\";\nlet initialState = {\n  email: null\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setAuthUserAC: email => ({\n    type: 'SET_AUTH_USER',\n    email\n  })\n};\nexport const authMeTC = () => {\n  return async dispatch => {\n    let response = await usersAuthApi.authMe();\n\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data.data;\n      dispatch(setAuthUserAC(id, email, login, true));\n    }\n  };\n};\nexport const loginTC = (email, password, rememberMe, captcha) => async dispatch => {\n  let response = await adminApi.loginMe(email, password);\n  console.log(response); //if (response) dispatch(authMeTC());\n  // else {\n  //   return 'error';\n  //}\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/authReducer.ts"],"names":["adminApi","initialState","email","authReducer","state","action","type","actions","setAuthUserAC","authMeTC","dispatch","response","usersAuthApi","authMe","data","resultCode","id","login","loginTC","password","rememberMe","captcha","loginMe","console","log"],"mappings":"AACA,SAAQA,QAAR,QAAuB,eAAvB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE;AADQ,CAAnB;AAKA,OAAO,MAAMC,WAAW,GAAG,YAA6D;AAAA,MAA5DC,KAA4D,uEAAtDH,YAAsD;AAAA,MAAxCI,MAAwC;;AAEpF,UAAQA,MAAM,CAACC,IAAf;AACI;AAAS;AACL,eAAOF,KAAP;AACH;AAHL;AAKH,CAPM;AASP,OAAO,MAAMG,OAAO,GAAG;AACnBC,EAAAA,aAAa,EAAIN,KAAD,KAAmB;AAACI,IAAAA,IAAI,EAAE,eAAP;AAAyBJ,IAAAA;AAAzB,GAAnB;AADG,CAAhB;AAGP,OAAO,MAAMO,QAAQ,GAAG,MAAK;AACzB,SAAO,MAAOC,QAAP,IAAuB;AAC1B,QAAIC,QAAQ,GAAG,MAAMC,YAAY,CAACC,MAAb,EAArB;;AACA,QAAGF,QAAQ,CAACG,IAAT,CAAcC,UAAd,KAA2B,CAA9B,EAAiC;AAC7B,UAAI;AAACC,QAAAA,EAAD;AAAKd,QAAAA,KAAL;AAAWe,QAAAA;AAAX,UAAoBN,QAAQ,CAACG,IAAT,CAAcA,IAAtC;AACAJ,MAAAA,QAAQ,CAACF,aAAa,CAACQ,EAAD,EAAId,KAAJ,EAAUe,KAAV,EAAgB,IAAhB,CAAd,CAAR;AACH;AACJ,GAND;AAOH,CARM;AASP,OAAO,MAAMC,OAAO,GAAG,CAAChB,KAAD,EAAeiB,QAAf,EAAgCC,UAAhC,EAAoDC,OAApD,KAAuE,MAAOX,QAAP,IAAwB;AAClH,MAAIC,QAAQ,GAAG,MAAMX,QAAQ,CAACsB,OAAT,CAAiBpB,KAAjB,EAAwBiB,QAAxB,CAArB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ,EAFkH,CAGlH;AACD;AACE;AACD;AACH,CAPM","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\nimport {adminApi} from \"../../Api/Api\";\n\nlet initialState = {\n    email: null as string | null,\n}\n\ntype initialStateType = typeof initialState;\nexport const authReducer = (state=initialState, action:ActionsTypes):initialStateType =>{\n\n    switch (action.type) {\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    setAuthUserAC : (email:string) => ({type: 'SET_AUTH_USER' , email} as const),\n}\nexport const authMeTC = () =>{\n    return async (dispatch:any) =>{\n        let response = await usersAuthApi.authMe();\n        if(response.data.resultCode===0) {\n            let {id, email,login} = response.data.data;\n            dispatch(setAuthUserAC(id,email,login,true));\n        }\n    }\n}\nexport const loginTC = (email:string, password:string, rememberMe:boolean, captcha:string) => async (dispatch:any) => {\n    let response = await adminApi.loginMe(email, password);\n    console.log(response);\n    //if (response) dispatch(authMeTC());\n   // else {\n     //   return 'error';\n    //}\n}\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}