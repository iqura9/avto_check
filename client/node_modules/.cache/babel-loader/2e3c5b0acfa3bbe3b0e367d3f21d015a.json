{"ast":null,"code":"import axios from \"axios\";\nlet accessToken = JSON.parse(String(localStorage.getItem('profile')));\nconst instance = axios.create({\n  baseURL: 'http://192.168.0.3:9000/' //headers : {\"Authorization\": `Bearer ${ config && config.accessToken}`},\n\n});\ninstance.interceptors.request.use(config => {\n  //@ts-ignore\n  config.headers.Authorization = `Bearer ${accessToken && accessToken.accessToken}`;\n  return config;\n});\ninstance.interceptors.response.use(config => {\n  return config;\n}, async error => {\n  if (error.response.status == 401) {\n    const responce = await instance.get(`auth/refresh`).then(res => res.data.accessToken);\n    accessToken.accessToken = responce;\n    localStorage.setItem('profile', accessToken);\n  }\n});\nexport const adminApi = {\n  getGoods() {\n    return instance.get(`api/cars`).then(res => res.data);\n  },\n\n  addNewFolder(data) {\n    return instance.post(`api/cars`, { ...data\n    }).then(res => res.data);\n  },\n\n  updateFolderName(id, data) {\n    return instance.put(`api/cars/${id}`, { ...data\n    }).then(res => res.data);\n  },\n\n  deleteFolder(id, userId) {\n    const mainId = `?id=${id}&userId=${userId}`;\n    return instance.delete(`api/cars${mainId}`).then(res => res.data);\n  },\n\n  loginMe(data) {\n    const {\n      email,\n      password\n    } = data;\n    return instance.post(`/auth/signIn`, {\n      email,\n      password\n    }).then(res => res.data);\n  },\n\n  signUp(data) {\n    return instance.post(`/auth/signUp`, data).then(res => res.data);\n  },\n\n  getFolders(id) {\n    return instance.get(`/api/users/${id}`).then(res => res.data);\n  },\n\n  addIdOfCar(data) {\n    return instance.post(`/api/users`, data).then(res => res.data);\n  }\n\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Api/Api.tsx"],"names":["axios","accessToken","JSON","parse","String","localStorage","getItem","instance","create","baseURL","interceptors","request","use","config","headers","Authorization","response","error","status","responce","get","then","res","data","setItem","adminApi","getGoods","addNewFolder","post","updateFolderName","id","put","deleteFolder","userId","mainId","delete","loginMe","email","password","signUp","getFolders","addIdOfCar"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {cars} from \"../Redux/reducers/folderPageReducer\";\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../Redux/Redux-store\";\nlet accessToken = JSON.parse(String(localStorage.getItem('profile')));\nconst instance = axios.create({\n    baseURL: 'http://192.168.0.3:9000/',\n    //headers : {\"Authorization\": `Bearer ${ config && config.accessToken}`},\n})\ninstance.interceptors.request.use((config) => {\n    //@ts-ignore\n    config.headers.Authorization = `Bearer ${ accessToken && accessToken.accessToken}`\n    return config;\n})\ninstance.interceptors.response.use((config)=>{\n    return config;\n},(async error => {\n    if(error.response.status == 401){\n        const responce = await instance.get(`auth/refresh`).then(res=> res.data.accessToken);\n        accessToken.accessToken = responce;\n        localStorage.setItem('profile', accessToken);\n    }\n}))\nexport const adminApi = {\n    getGoods() {\n        return instance.get<Array<cars>>(`api/cars`).then(res=> res.data);\n    },\n    addNewFolder(data:any){\n        return instance.post(`api/cars`, {...data}).then(res=>res.data);\n    },\n    updateFolderName(id:string,data:any){\n        return instance.put(`api/cars/${id}`, {...data}).then(res=>res.data);\n    },\n    deleteFolder(id:any, userId:any) {\n        const mainId= `?id=${id}&userId=${userId}`;\n        return instance.delete(`api/cars${mainId}`, ).then(res=> res.data);\n    },\n    loginMe(data:{email: string, password: string}) {\n        const {email,password} = data;\n        return instance.post(`/auth/signIn`, {email,password}).then(res=>res.data);\n    },\n    signUp(data:{email: string, password: string}) {\n        return instance.post(`/auth/signUp`, data).then(res=>res.data);\n    },\n    getFolders(id:string){\n        return instance.get(`/api/users/${id}`).then(res=>res.data);\n    },\n    addIdOfCar(data:any){\n        return instance.post(`/api/users`, data).then(res=>res.data);\n    }\n\n}"]},"metadata":{},"sourceType":"module"}