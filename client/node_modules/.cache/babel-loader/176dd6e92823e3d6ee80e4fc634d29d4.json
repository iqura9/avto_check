{"ast":null,"code":"let initialState = {\n  MainNumberURL: '',\n  info: [\n    /*{id:1, number: 334443113}*/\n  ]\n};\nexport const showReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'newURL':\n      return { ...state,\n        MainNumberURL: action.url\n      };\n\n    case 'initProgram':\n      return { ...state,\n        info: JSON.parse(localStorage.getItem('testObject') || \"\"),\n        MainNumberURL: JSON.parse(localStorage.getItem('mainURL') || \"\")\n      };\n\n    case 'setInxToInfo':\n      return { ...state,\n        info: [...state.info, {\n          id: state.info.length + 1,\n          number: action.number\n        }]\n      };\n\n    case 'deleteId':\n      return { ...state,\n        info: state.info.filter(f => f.number != action.id)\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  changeUrl: url => ({\n    type: 'newURL',\n    url\n  }),\n  setInitializeProgram: () => ({\n    type: 'initProgram'\n  }),\n  setInxToInfo: number => ({\n    type: 'setInxToInfo',\n    number\n  }),\n  deleteIdAC: id => ({\n    type: 'deleteId',\n    id\n  })\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/showPageReducer.ts"],"names":["initialState","MainNumberURL","info","showReducer","state","action","type","url","JSON","parse","localStorage","getItem","id","length","number","filter","f","actions","changeUrl","setInitializeProgram","setInxToInfo","deleteIdAC"],"mappings":"AAOA,IAAIA,YAAY,GAAG;AACfC,EAAAA,aAAa,EAAC,EADC;AAEfC,EAAAA,IAAI,EAAC;AACD;AADC;AAFU,CAAnB;AAOA,OAAO,MAAMC,WAAW,GAAG,YAAyD;AAAA,MAAxDC,KAAwD,uEAAlDJ,YAAkD;AAAA,MAApCK,MAAoC;;AAEhF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AACI,aAAM,EACF,GAAGF,KADD;AAEFH,QAAAA,aAAa,EAAEI,MAAM,CAACE;AAFpB,OAAN;;AAIJ,SAAK,aAAL;AACI,aAAM,EACF,GAAGH,KADD;AAEFF,QAAAA,IAAI,EAACM,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,YAArB,KAAsC,EAAjD,CAFH;AAGFV,QAAAA,aAAa,EAACO,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,KAAmC,EAA9C;AAHZ,OAAN;;AAKJ,SAAK,cAAL;AACI,aAAM,EACF,GAAGP,KADD;AAEFF,QAAAA,IAAI,EAAC,CAAC,GAAGE,KAAK,CAACF,IAAV,EAAgB;AAACU,UAAAA,EAAE,EAAER,KAAK,CAACF,IAAN,CAAWW,MAAX,GAAkB,CAAvB;AAA0BC,UAAAA,MAAM,EAAET,MAAM,CAACS;AAAzC,SAAhB;AAFH,OAAN;;AAIJ,SAAK,UAAL;AACI,aAAM,EACF,GAAGV,KADD;AAEFF,QAAAA,IAAI,EAACE,KAAK,CAACF,IAAN,CAAWa,MAAX,CAAkBC,CAAC,IAAIA,CAAC,CAACF,MAAF,IAAWT,MAAM,CAACO,EAAzC;AAFH,OAAN;;AAIJ;AAAS;AACL,eAAOR,KAAP;AACH;AAxBL;AA0BH,CA5BM;AA8BP,OAAO,MAAMa,OAAO,GAAG;AACnBC,EAAAA,SAAS,EAAGX,GAAD,KAA0B;AAACD,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA;AAAjB,GAA1B,CADQ;AAEnBY,EAAAA,oBAAoB,EAAE,OAAO;AAACb,IAAAA,IAAI,EAAE;AAAP,GAAP,CAFH;AAGnBc,EAAAA,YAAY,EAAGN,MAAD,KAAoB;AAACR,IAAAA,IAAI,EAAE,cAAP;AAAuBQ,IAAAA;AAAvB,GAApB,CAHK;AAInBO,EAAAA,UAAU,EAAGT,EAAD,KAAgB;AAACN,IAAAA,IAAI,EAAE,UAAP;AAAmBM,IAAAA;AAAnB,GAAhB;AAJO,CAAhB","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\n\ninterface infoType {\n    id: number,\n    number: number\n}\n\nlet initialState = {\n    MainNumberURL:'' as string | number,\n    info:[\n        /*{id:1, number: 334443113}*/\n    ] as Array<infoType>\n}\ntype InitialState = typeof initialState;\nexport const showReducer = (state=initialState, action:ActionsTypes):InitialState =>{\n\n    switch (action.type) {\n        case 'newURL':\n            return{\n                ...state,\n                MainNumberURL: action.url\n            }\n        case 'initProgram':\n            return{\n                ...state,\n                info:JSON.parse(localStorage.getItem('testObject') || \"\"),\n                MainNumberURL:JSON.parse(localStorage.getItem('mainURL') || \"\"),\n            }\n        case 'setInxToInfo':\n            return{\n                ...state,\n                info:[...state.info, {id: state.info.length+1, number: action.number}]\n            }\n        case 'deleteId':\n            return{\n                ...state,\n                info:state.info.filter(f => f.number !=action.id)\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    changeUrl: (url:string | number) => ({type: 'newURL', url} as const),\n    setInitializeProgram: () => ({type: 'initProgram',} as const),\n    setInxToInfo: (number:number) => ({type: 'setInxToInfo', number} as const),\n    deleteIdAC: (id:number) => ({type: 'deleteId', id} as const)\n}\n\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}