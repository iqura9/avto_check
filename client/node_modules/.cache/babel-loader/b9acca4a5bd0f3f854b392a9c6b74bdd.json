{"ast":null,"code":"let initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captcha: null\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'newURL':\n      return { ...state,\n        MainNumberURL: action.url\n      };\n\n    case 'initProgram':\n      return { ...state,\n        MainNumberURL: JSON.parse(localStorage.getItem('mainURL') || \"\")\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  changeUrl: url => ({\n    type: 'newURL',\n    url\n  }),\n  setInitializeProgram: () => ({\n    type: 'initProgram'\n  })\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/authReducer.ts"],"names":["initialState","id","email","login","isAuth","captcha","authReducer","state","action","type","MainNumberURL","url","JSON","parse","localStorage","getItem","actions","changeUrl","setInitializeProgram"],"mappings":"AAEA,IAAIA,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE,KAJO;AAKfC,EAAAA,OAAO,EAAE;AALM,CAAnB;AASA,OAAO,MAAMC,WAAW,GAAG,YAAyD;AAAA,MAAxDC,KAAwD,uEAAlDP,YAAkD;AAAA,MAApCQ,MAAoC;;AAEhF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AACI,aAAM,EACF,GAAGF,KADD;AAEFG,QAAAA,aAAa,EAAEF,MAAM,CAACG;AAFpB,OAAN;;AAIJ,SAAK,aAAL;AACI,aAAM,EACF,GAAGJ,KADD;AAEFG,QAAAA,aAAa,EAACE,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,KAAmC,EAA9C;AAFZ,OAAN;;AAIJ;AAAS;AACL,eAAOR,KAAP;AACH;AAbL;AAeH,CAjBM;AAmBP,OAAO,MAAMS,OAAO,GAAG;AACnBC,EAAAA,SAAS,EAAGN,GAAD,KAA0B;AAACF,IAAAA,IAAI,EAAE,QAAP;AAAiBE,IAAAA;AAAjB,GAA1B,CADQ;AAEnBO,EAAAA,oBAAoB,EAAE,OAAO;AAACT,IAAAA,IAAI,EAAE;AAAP,GAAP;AAFH,CAAhB","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\n\nlet initialState = {\n    id: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false as boolean,\n    captcha: null as string | null\n}\n\ntype InitialState = typeof initialState;\nexport const authReducer = (state=initialState, action:ActionsTypes):InitialState =>{\n\n    switch (action.type) {\n        case 'newURL':\n            return{\n                ...state,\n                MainNumberURL: action.url\n            }\n        case 'initProgram':\n            return{\n                ...state,\n                MainNumberURL:JSON.parse(localStorage.getItem('mainURL') || \"\"),\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    changeUrl: (url:string | number) => ({type: 'newURL', url} as const),\n    setInitializeProgram: () => ({type: 'initProgram',} as const),\n\n}\n\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}