{"ast":null,"code":"var _jsxFileName = \"/Users/iqura/web_storm_projects/avto/client/src/UI/Folder/Folder.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './folder.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { addNewFolder, deleteFolderX, setCarFromDB } from \"../../Redux/reducers/folderPageReducer\";\nimport * as uuid from 'uuid';\nimport ShowFolderFC from \"./ShowFolderFC\";\nimport { setAdminFolderToRedux } from \"../../Redux/reducers/adminFolderPageReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Folder = _ref => {\n  _s();\n\n  let {\n    seeAll\n  } = _ref;\n  const user = useSelector(state => state.auth);\n  const cars = useSelector(state => state.folderPage.ArrayFolders);\n  const AdminFolderCars = useSelector(state => state.adminFolderPage.ArrayFolders);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = history.location.pathname;\n  let SortedCars;\n\n  if (seeAll) {\n    if (AdminFolderCars.length === 0) dispatch(setAdminFolderToRedux());\n    SortedCars = AdminFolderCars.slice(0);\n  } else {\n    if (cars.length === 0) dispatch(setCarFromDB(user._id));\n    SortedCars = cars.slice(0);\n  }\n\n  SortedCars.sort(function (a, b) {\n    return b.Cars.length - a.Cars.length;\n  });\n\n  const nextPage = id => {\n    history.push(`/folder/${id}`);\n  };\n\n  const creatFolder = folderName => {\n    let newId = uuid.v4();\n    let newFolder = {\n      mainImg: '',\n      nameOfFolder: folderName + ' - ' + newId.slice(0, 4),\n      Cars: [],\n      userId: user._id\n    };\n    dispatch(addNewFolder(newFolder));\n  };\n\n  const deleteFolder = id => {\n    dispatch(deleteFolderX(id, user._id));\n  };\n\n  return /*#__PURE__*/_jsxDEV(ShowFolderFC, {\n    SortedCars: SortedCars,\n    nextPage: nextPage,\n    creatFolder: creatFolder,\n    deleteFolder: deleteFolder\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Folder, \"NwaFhg7hd75tFxOVDkMXWtkGuJg=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch, useHistory];\n});\n\n_c = Folder;\nexport default Folder;\n\nvar _c;\n\n$RefreshReg$(_c, \"Folder\");","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/UI/Folder/Folder.tsx"],"names":["React","useDispatch","useSelector","useHistory","addNewFolder","deleteFolderX","setCarFromDB","uuid","ShowFolderFC","setAdminFolderToRedux","Folder","seeAll","user","state","auth","cars","folderPage","ArrayFolders","AdminFolderCars","adminFolderPage","dispatch","history","location","pathname","SortedCars","length","slice","_id","sort","a","b","Cars","nextPage","id","push","creatFolder","folderName","newId","v4","newFolder","mainImg","nameOfFolder","userId","deleteFolder"],"mappings":";;;AAAA,OAAOA,KAAP,MAAiD,OAAjD;AACA,OAAO,cAAP;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AAEA,SAAQC,UAAR,QAAoC,kBAApC;AACA,SAEIC,YAFJ,EAIKC,aAJL,EAKIC,YALJ,QAMO,wCANP;AAOA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AAGA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,qBAAR,QAAoC,6CAApC;;;AAOA,MAAMC,MAAuB,GAAG,QAAc;AAAA;;AAAA,MAAb;AAACC,IAAAA;AAAD,GAAa;AAC1C,QAAMC,IAAI,GAAGV,WAAW,CAAGW,KAAD,IAAwBA,KAAK,CAACC,IAAhC,CAAxB;AACA,QAAMC,IAAI,GAAGb,WAAW,CAAEW,KAAD,IAAyBA,KAAK,CAACG,UAAN,CAAiBC,YAA3C,CAAxB;AACA,QAAMC,eAAe,GAAGhB,WAAW,CAAEW,KAAD,IAAyBA,KAAK,CAACM,eAAN,CAAsBF,YAAhD,CAAnC;AAEA,QAAMG,QAAQ,GAAGnB,WAAW,EAA5B;AACA,QAAMoB,OAAO,GAAGlB,UAAU,EAA1B;AACA,QAAMmB,QAAQ,GAAGD,OAAO,CAACC,QAAR,CAAiBC,QAAlC;AAEA,MAAIC,UAAJ;;AACA,MAAGb,MAAH,EAAU;AACN,QAAGO,eAAe,CAACO,MAAhB,KAAyB,CAA5B,EAA+BL,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AAC/Be,IAAAA,UAAU,GAAGN,eAAe,CAACQ,KAAhB,CAAsB,CAAtB,CAAb;AACH,GAHD,MAGK;AACD,QAAGX,IAAI,CAACU,MAAL,KAAc,CAAjB,EAAoBL,QAAQ,CAACd,YAAY,CAACM,IAAI,CAACe,GAAN,CAAb,CAAR;AACpBH,IAAAA,UAAU,GAAGT,IAAI,CAACW,KAAL,CAAW,CAAX,CAAb;AACH;;AACDF,EAAAA,UAAU,CAACI,IAAX,CAAgB,UAASC,CAAT,EAAWC,CAAX,EAAc;AAC1B,WAAOA,CAAC,CAACC,IAAF,CAAON,MAAP,GAAgBI,CAAC,CAACE,IAAF,CAAON,MAA9B;AACH,GAFD;;AAKA,QAAMO,QAAQ,GAAIC,EAAD,IAAyB;AACtCZ,IAAAA,OAAO,CAACa,IAAR,CAAc,WAAUD,EAAG,EAA3B;AACH,GAFD;;AAIA,QAAME,WAAW,GAAIC,UAAD,IAAwB;AACxC,QAAIC,KAAK,GAAG9B,IAAI,CAAC+B,EAAL,EAAZ;AACA,QAAIC,SAAS,GAAG;AACZC,MAAAA,OAAO,EAAE,EADG;AAEZC,MAAAA,YAAY,EAAEL,UAAU,GAAG,KAAb,GAAqBC,KAAK,CAACX,KAAN,CAAY,CAAZ,EAAe,CAAf,CAFvB;AAGZK,MAAAA,IAAI,EAAE,EAHM;AAIZW,MAAAA,MAAM,EAAE9B,IAAI,CAACe;AAJD,KAAhB;AAMCP,IAAAA,QAAQ,CAAChB,YAAY,CAACmC,SAAD,CAAb,CAAR;AACJ,GATD;;AAWA,QAAMI,YAAY,GAAIV,EAAD,IAAc;AAC/Bb,IAAAA,QAAQ,CAACf,aAAa,CAAC4B,EAAD,EAAIrB,IAAI,CAACe,GAAT,CAAd,CAAR;AACH,GAFD;;AAGA,sBACI,QAAC,YAAD;AAAc,IAAA,UAAU,EAAEH,UAA1B;AAAsC,IAAA,QAAQ,EAAEQ,QAAhD;AAA0D,IAAA,WAAW,EAAEG,WAAvE;AAAoF,IAAA,YAAY,EAAEQ;AAAlG;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CA3CD;;GAAMjC,M;UACWR,W,EACAA,W,EACWA,W,EAEPD,W,EACDE,U;;;KANdO,M;AA6CN,eAAeA,MAAf","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport './folder.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/Redux-store\";\nimport {useHistory, useParams} from \"react-router-dom\";\nimport {\n    actions,\n    addNewFolder,\n    chnageNameFolderThunk,\n     deleteFolderX,\n    setCarFromDB\n} from \"../../Redux/reducers/folderPageReducer\";\nimport * as uuid from 'uuid';\nimport {useForm} from \"react-hook-form\";\nimport {adminApi} from \"../../Api/Api\";\nimport ShowFolderFC from \"./ShowFolderFC\";\nimport {setAdminFolderToRedux} from \"../../Redux/reducers/adminFolderPageReducer\";\n\ninterface IProps{\n    seeAll?: boolean\n}\n\n\nconst Folder:React.FC<IProps> = ({seeAll}) => {\n    const user = useSelector( (state:AppStateType) => state.auth);\n    const cars = useSelector((state: AppStateType) => state.folderPage.ArrayFolders);\n    const AdminFolderCars = useSelector((state: AppStateType) => state.adminFolderPage.ArrayFolders);\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const location = history.location.pathname;\n\n    let SortedCars;\n    if(seeAll){\n        if(AdminFolderCars.length===0) dispatch(setAdminFolderToRedux());\n        SortedCars = AdminFolderCars.slice(0);\n    }else{\n        if(cars.length===0) dispatch(setCarFromDB(user._id));\n        SortedCars = cars.slice(0);\n    }\n    SortedCars.sort(function(a,b) {\n        return b.Cars.length - a.Cars.length;\n    });\n\n\n    const nextPage = (id: string | number) => {\n        history.push(`/folder/${id}`);\n    }\n\n    const creatFolder = (folderName: string) => {\n        let newId = uuid.v4();\n        let newFolder = {\n            mainImg: '',\n            nameOfFolder: folderName + ' - ' + newId.slice(0, 4),\n            Cars: [],\n            userId: user._id\n        }\n         dispatch(addNewFolder(newFolder));\n    }\n\n    const deleteFolder = (id:string) =>{\n        dispatch(deleteFolderX(id,user._id));\n    }\n    return (\n        <ShowFolderFC SortedCars={SortedCars} nextPage={nextPage} creatFolder={creatFolder} deleteFolder={deleteFolder}/>\n    );\n};\n\nexport default Folder;"]},"metadata":{},"sourceType":"module"}