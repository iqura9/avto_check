{"ast":null,"code":"import { adminApi } from \"../../Api/Api\";\nlet initialState = {\n  email: '',\n  avatar: null,\n  avatarId: null,\n  lastName: '',\n  firstName: '',\n  gender: null,\n  address: null,\n  profession: '',\n  searchField: '',\n  phone: '',\n  roles: ''\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"SET_AUTH_USER\":\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setAuthUserAC: payload => ({\n    type: 'SET_AUTH_USER',\n    payload\n  })\n};\n/*export const authMeTC = () =>{\n    return async (dispatch:any) =>{\n        let response = await usersAuthApi.authMe();\n        if(response.data.resultCode===0) {\n            let {id, email,login} = response.data.data;\n            dispatch(setAuthUserAC(id,email,login,true));\n        }\n    }\n}*/\n\nexport const loginTC = data => async dispatch => {\n  let response = await adminApi.loginMe(data);\n  dispatch(actions.setAuthUserAC(response));\n  localStorage.setItem(\"profile\", JSON.stringify(response));\n  console.log(response); //if (response) dispatch(authMeTC());\n  // else {\n  //   return 'error';\n  //}\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/authReducer.ts"],"names":["adminApi","initialState","email","avatar","avatarId","lastName","firstName","gender","address","profession","searchField","phone","roles","authReducer","state","action","type","payload","actions","setAuthUserAC","loginTC","data","dispatch","response","loginMe","localStorage","setItem","JSON","stringify","console","log"],"mappings":"AACA,SAAQA,QAAR,QAAuB,eAAvB;AAQA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,EADQ;AAEfC,EAAAA,MAAM,EAAE,IAFO;AAGfC,EAAAA,QAAQ,EAAE,IAHK;AAIfC,EAAAA,QAAQ,EAAE,EAJK;AAKfC,EAAAA,SAAS,EAAE,EALI;AAMfC,EAAAA,MAAM,EAAE,IANO;AAOfC,EAAAA,OAAO,EAAE,IAPM;AAQfC,EAAAA,UAAU,EAAE,EARG;AASfC,EAAAA,WAAW,EAAE,EATE;AAUfC,EAAAA,KAAK,EAAE,EAVQ;AAWfC,EAAAA,KAAK,EAAE;AAXQ,CAAnB;AAeA,OAAO,MAAMC,WAAW,GAAG,YAA6D;AAAA,MAA5DC,KAA4D,uEAAtDb,YAAsD;AAAA,MAAxCc,MAAwC;;AAEpF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,eAAL;AACI,aAAM,EACF,GAAGF,KADD;AAEF,WAAGC,MAAM,CAACE;AAFR,OAAN;;AAIJ;AAAS;AACL,eAAOH,KAAP;AACH;AARL;AAUH,CAZM;AAcP,OAAO,MAAMI,OAAO,GAAG;AACnBC,EAAAA,aAAa,EAAIF,OAAD,KAA+B;AAACD,IAAAA,IAAI,EAAE,eAAP;AAAyBC,IAAAA;AAAzB,GAA/B;AADG,CAAhB;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMG,OAAO,GAAIC,IAAD,IAAsD,MAAOC,QAAP,IAAwB;AACjG,MAAIC,QAAQ,GAAG,MAAMvB,QAAQ,CAACwB,OAAT,CAAiBH,IAAjB,CAArB;AACAC,EAAAA,QAAQ,CAACJ,OAAO,CAACC,aAAR,CAAsBI,QAAtB,CAAD,CAAR;AACAE,EAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCC,IAAI,CAACC,SAAL,CAAeL,QAAf,CAAhC;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ,EAJiG,CAKjG;AACD;AACE;AACD;AACH,CATM","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\nimport {adminApi} from \"../../Api/Api\";\ninterface IAddress {\n    country: string | null;\n    city: string | null;\n    addressLine1: string | null;\n    addressLine2: string | null;\n}\n\nlet initialState = {\n    email: '' as string,\n    avatar: null as null | string,\n    avatarId: null as null | string,\n    lastName: '' as string,\n    firstName: '' as string,\n    gender: null as null | string,\n    address: null as null | IAddress,\n    profession: '' as string,\n    searchField: '' as string,\n    phone: '' as string,\n    roles: '' as string | Array<string>,\n}\n\ntype initialStateType = typeof initialState;\nexport const authReducer = (state=initialState, action:ActionsTypes):initialStateType =>{\n\n    switch (action.type) {\n        case \"SET_AUTH_USER\":\n            return{\n                ...state,\n                ...action.payload\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    setAuthUserAC : (payload:initialStateType) => ({type: 'SET_AUTH_USER' , payload} as const),\n}\n/*export const authMeTC = () =>{\n    return async (dispatch:any) =>{\n        let response = await usersAuthApi.authMe();\n        if(response.data.resultCode===0) {\n            let {id, email,login} = response.data.data;\n            dispatch(setAuthUserAC(id,email,login,true));\n        }\n    }\n}*/\n\nexport const loginTC = (data:{email: string, password: string}):ThunkType => async (dispatch:any) => {\n    let response = await adminApi.loginMe(data);\n    dispatch(actions.setAuthUserAC(response));\n    localStorage.setItem(\"profile\", JSON.stringify(response));\n    console.log(response);\n    //if (response) dispatch(authMeTC());\n   // else {\n     //   return 'error';\n    //}\n}\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}