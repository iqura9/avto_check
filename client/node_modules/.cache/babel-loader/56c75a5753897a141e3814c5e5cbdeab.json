{"ast":null,"code":"let initialState = {\n  ArrayFolders: [{\n    folderId: 'FolderNumber1',\n    mainImg: '',\n    nameOfFolder: 'folder',\n    Cars: [{\n      id: 1,\n      number: 334443113\n    }, {\n      id: 2,\n      number: 334443115\n    }, {\n      id: 3,\n      number: 334443114\n    }]\n  }, {\n    folderId: 'FolderNumber2',\n    mainImg: '',\n    nameOfFolder: 'folder2',\n    Cars: [{\n      id: 3,\n      number: 334443118\n    }, {\n      id: 4,\n      number: 334443119\n    }, {\n      id: 5,\n      number: 334443119\n    }, {\n      id: 6,\n      number: 334443119\n    }, {\n      id: 7,\n      number: 334443119\n    }]\n  }]\n};\nexport const folderReducer = function () {\n  var _state$ArrayFolders$f;\n\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"deleteId\":\n      return { ...state,\n        ...((_state$ArrayFolders$f = state.ArrayFolders.find(q => q.folderId == action.folderID)) === null || _state$ArrayFolders$f === void 0 ? void 0 : _state$ArrayFolders$f.Cars.filter(f => f.id != action.productID))\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  deleteId: (folderID, productID) => ({\n    type: 'deleteId',\n    folderID,\n    productID\n  })\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/src/Redux/reducers/folderPageReducer.ts"],"names":["initialState","ArrayFolders","folderId","mainImg","nameOfFolder","Cars","id","number","folderReducer","state","action","type","find","q","folderID","filter","f","productID","actions","deleteId"],"mappings":"AAaA,IAAIA,YAAY,GAAG;AACfC,EAAAA,YAAY,EAAC,CACT;AACIC,IAAAA,QAAQ,EAAC,eADb;AAEIC,IAAAA,OAAO,EAAE,EAFb;AAGIC,IAAAA,YAAY,EAAE,QAHlB;AAIIC,IAAAA,IAAI,EAAC,CACD;AAACC,MAAAA,EAAE,EAAC,CAAJ;AAAOC,MAAAA,MAAM,EAAE;AAAf,KADC,EAED;AAACD,MAAAA,EAAE,EAAC,CAAJ;AAAOC,MAAAA,MAAM,EAAE;AAAf,KAFC,EAGD;AAACD,MAAAA,EAAE,EAAC,CAAJ;AAAOC,MAAAA,MAAM,EAAE;AAAf,KAHC;AAJT,GADS,EAWT;AACIL,IAAAA,QAAQ,EAAE,eADd;AAEIC,IAAAA,OAAO,EAAE,EAFb;AAGIC,IAAAA,YAAY,EAAE,SAHlB;AAIIC,IAAAA,IAAI,EAAC,CACD;AAACC,MAAAA,EAAE,EAAC,CAAJ;AAAOC,MAAAA,MAAM,EAAE;AAAf,KADC,EAED;AAACD,MAAAA,EAAE,EAAC,CAAJ;AAAOC,MAAAA,MAAM,EAAE;AAAf,KAFC,EAGD;AAACD,MAAAA,EAAE,EAAC,CAAJ;AAAOC,MAAAA,MAAM,EAAE;AAAf,KAHC,EAID;AAACD,MAAAA,EAAE,EAAC,CAAJ;AAAOC,MAAAA,MAAM,EAAE;AAAf,KAJC,EAKD;AAACD,MAAAA,EAAE,EAAC,CAAJ;AAAOC,MAAAA,MAAM,EAAE;AAAf,KALC;AAJT,GAXS;AADE,CAAnB;AA2BA,OAAO,MAAMC,aAAa,GAAG,YAAyD;AAAA;;AAAA,MAAxDC,KAAwD,uEAAlDT,YAAkD;AAAA,MAApCU,MAAoC;;AAElF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,UAAL;AACI,aAAM,EACF,GAAGF,KADD;AAEF,qCAAGA,KAAK,CAACR,YAAN,CAAmBW,IAAnB,CAAyBC,CAAC,IAAGA,CAAC,CAACX,QAAF,IAAcQ,MAAM,CAACI,QAAlD,CAAH,0DAAG,sBAA6DT,IAA7D,CAAkEU,MAAlE,CAAyEC,CAAC,IAAIA,CAAC,CAACV,EAAF,IAAQI,MAAM,CAACO,SAA7F,CAAH;AAFE,OAAN;;AAIJ;AAAS;AACL,eAAOR,KAAP;AACH;AARL;AAUH,CAZM;AAcP,OAAO,MAAMS,OAAO,GAAG;AACnBC,EAAAA,QAAQ,EAAE,CAACL,QAAD,EAAkBG,SAAlB,MAAwC;AAACN,IAAAA,IAAI,EAAE,UAAP;AAAmBG,IAAAA,QAAnB;AAA6BG,IAAAA;AAA7B,GAAxC;AADS,CAAhB","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\n\ninterface infoType {\n    id: number | string,\n    number: number\n}\ninterface cars {\n    folderId:number | string\n    mainImg: string,\n    nameOfFolder: string,\n    Cars: Array<infoType>\n}\n\nlet initialState = {\n    ArrayFolders:[\n        {\n            folderId:'FolderNumber1',\n            mainImg: '',\n            nameOfFolder: 'folder',\n            Cars:[\n                {id:1, number: 334443113},\n                {id:2, number: 334443115},\n                {id:3, number: 334443114},\n            ] as Array<infoType>\n        },\n        {\n            folderId: 'FolderNumber2',\n            mainImg: '' as string | null,\n            nameOfFolder: 'folder2' as string,\n            Cars:[\n                {id:3, number: 334443118},\n                {id:4, number: 334443119},\n                {id:5, number: 334443119},\n                {id:6, number: 334443119},\n                {id:7, number: 334443119},\n            ] as Array<infoType>\n        }\n    ] as Array<cars>\n}\ntype InitialState = typeof initialState;\nexport const folderReducer = (state=initialState, action:ActionsTypes):InitialState =>{\n\n    switch (action.type) {\n        case \"deleteId\":\n            return{\n                ...state,\n                ...state.ArrayFolders.find( q=> q.folderId == action.folderID)?.Cars.filter(f => f.id != action.productID)\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    deleteId: (folderID:string, productID:string) => ({type: 'deleteId', folderID, productID} as const)\n}\n\n\n\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}