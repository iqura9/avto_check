{"ast":null,"code":"let initialState = {\n  MainNumberURL: '',\n  MainNumberLetter: '',\n  info: [{\n    id: 1,\n    number: 334443113\n  }]\n};\nexport const showReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'newURL':\n      return { ...state,\n        MainNumberURL: action.url\n      };\n\n    case 'newURL2':\n      return { ...state,\n        MainNumberLetter: action.url\n      };\n\n    case 'initProgram':\n      return { ...state //info:JSON.parse(localStorage.getItem('testObject'))\n\n      };\n\n    case 'setInxToInfo':\n      return { ...state,\n        info: [...state.info, {\n          id: state.info.length + 1,\n          number: action.number\n        }]\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const changeUrl = url => {\n  return {\n    type: 'newURL',\n    url\n  };\n};\nexport const changeUrl2 = url => {\n  return {\n    type: 'newURL2',\n    url\n  };\n};\nexport const setInitializeProgram = () => {\n  return {\n    type: 'initProgram'\n  };\n};\nexport const setInxToInfo = number => {\n  return {\n    type: 'setInxToInfo',\n    number\n  };\n};\nexport const sendThunka = number => async (dispatch, getState) => {\n  let response = await setInxToInfo(number);\n\n  if (response) {\n    console.log(getState().showPage.info);\n  } //localStorage.setItem('testObject', JSON.stringify(getState().showPage.info));\n\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/src/Redux/reducers/showPageReducer.js"],"names":["initialState","MainNumberURL","MainNumberLetter","info","id","number","showReducer","state","action","type","url","length","changeUrl","changeUrl2","setInitializeProgram","setInxToInfo","sendThunka","dispatch","getState","response","console","log","showPage"],"mappings":"AACA,IAAIA,YAAY,GAAG;AACfC,EAAAA,aAAa,EAAC,EADC;AAEfC,EAAAA,gBAAgB,EAAC,EAFF;AAGfC,EAAAA,IAAI,EAAC,CACD;AAACC,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,MAAM,EAAE;AAAf,GADC;AAHU,CAAnB;AAQA,OAAO,MAAMC,WAAW,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAxBP,YAAwB;AAAA,MAAVQ,MAAU;;AAEtD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AACI,aAAM,EACF,GAAGF,KADD;AAEFN,QAAAA,aAAa,EAAEO,MAAM,CAACE;AAFpB,OAAN;;AAIJ,SAAK,SAAL;AACI,aAAM,EACF,GAAGH,KADD;AAEFL,QAAAA,gBAAgB,EAAEM,MAAM,CAACE;AAFvB,OAAN;;AAIJ,SAAK,aAAL;AACI,aAAM,EACF,GAAGH,KADD,CAEF;;AAFE,OAAN;;AAIJ,SAAK,cAAL;AACI,aAAM,EACF,GAAGA,KADD;AAEFJ,QAAAA,IAAI,EAAC,CAAC,GAAGI,KAAK,CAACJ,IAAV,EAAgB;AAACC,UAAAA,EAAE,EAAEG,KAAK,CAACJ,IAAN,CAAWQ,MAAX,GAAkB,CAAvB;AAA0BN,UAAAA,MAAM,EAAEG,MAAM,CAACH;AAAzC,SAAhB;AAFH,OAAN;;AAIJ;AAAS;AACL,eAAOE,KAAP;AACH;AAvBL;AAyBH,CA3BM;AA4BP,OAAO,MAAMK,SAAS,GAAIF,GAAD,IAAS;AAC9B,SAAM;AACFD,IAAAA,IAAI,EAAE,QADJ;AAEFC,IAAAA;AAFE,GAAN;AAIH,CALM;AAMP,OAAO,MAAMG,UAAU,GAAIH,GAAD,IAAS;AAC/B,SAAM;AACFD,IAAAA,IAAI,EAAE,SADJ;AAEFC,IAAAA;AAFE,GAAN;AAIH,CALM;AAMP,OAAO,MAAMI,oBAAoB,GAAG,MAAM;AACtC,SAAM;AACFL,IAAAA,IAAI,EAAE;AADJ,GAAN;AAGH,CAJM;AAKP,OAAO,MAAMM,YAAY,GAAIV,MAAD,IAAY;AACpC,SAAM;AACFI,IAAAA,IAAI,EAAE,cADJ;AAEFJ,IAAAA;AAFE,GAAN;AAIH,CALM;AAMP,OAAO,MAAMW,UAAU,GAAIX,MAAD,IAAY,OAAOY,QAAP,EAAgBC,QAAhB,KAA4B;AAC9D,MAAIC,QAAQ,GAAG,MAAOJ,YAAY,CAACV,MAAD,CAAlC;;AACA,MAAGc,QAAH,EAAa;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,GAAGI,QAAX,CAAoBnB,IAAhC;AACH,GAJ6D,CAI7D;;AAEJ,CANM","sourcesContent":["\nlet initialState = {\n    MainNumberURL:'',\n    MainNumberLetter:'',\n    info:[\n        {id:1, number: 334443113}\n    ]\n}\n\nexport const showReducer = (state=initialState, action) =>{\n\n    switch (action.type) {\n        case 'newURL':\n            return{\n                ...state,\n                MainNumberURL: action.url\n            }\n        case 'newURL2':\n            return{\n                ...state,\n                MainNumberLetter: action.url\n            }\n        case 'initProgram':\n            return{\n                ...state,\n                //info:JSON.parse(localStorage.getItem('testObject'))\n            }\n        case 'setInxToInfo':\n            return{\n                ...state,\n                info:[...state.info, {id: state.info.length+1, number: action.number}]\n            }\n        default: {\n            return state;\n        }\n    }\n}\nexport const changeUrl = (url) => {\n    return{\n        type: 'newURL',\n        url\n    }\n}\nexport const changeUrl2 = (url) => {\n    return{\n        type: 'newURL2',\n        url\n    }\n}\nexport const setInitializeProgram = () => {\n    return{\n        type: 'initProgram',\n    }\n}\nexport const setInxToInfo = (number) => {\n    return{\n        type: 'setInxToInfo',\n        number\n    }\n}\nexport const sendThunka = (number) => async (dispatch,getState) =>{\n    let response = await (setInxToInfo(number));\n    if(response) {\n        console.log(getState().showPage.info);\n    }//localStorage.setItem('testObject', JSON.stringify(getState().showPage.info));\n\n}"]},"metadata":{},"sourceType":"module"}