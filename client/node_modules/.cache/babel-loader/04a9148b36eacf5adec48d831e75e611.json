{"ast":null,"code":"import * as uuid from \"uuid\";\nimport { adminApi } from \"../../Api/Api\";\nlet initialState = {\n  ArrayFolders: [{\n    _id: 'FolderNumber1',\n    mainImg: '',\n    nameOfFolder: 'folder',\n    Cars: [{\n      id: '1',\n      number: 334443119\n    }, {\n      id: '2',\n      number: 334443120\n    }, {\n      id: '3',\n      number: 334443121\n    }]\n  }, {\n    _id: 'FolderNumber2',\n    mainImg: '',\n    nameOfFolder: 'Temp Folder',\n    Cars: []\n  }]\n};\nexport const folderReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"deleteId\":\n      //debugger;\n      return { ...state,\n        ArrayFolders: state.ArrayFolders.map(u => {\n          if (u._id === action.folderID) {\n            return { ...u,\n              Cars: u.Cars.filter(f => f.id != action.productID)\n            };\n          }\n\n          return { ...u,\n            ...u.Cars\n          };\n        })\n      };\n\n    case \"addNewFolder\":\n      return { ...state,\n        ArrayFolders: [...state.ArrayFolders, action.folderData]\n      };\n\n    case \"changeName\":\n      return { ...state,\n        ArrayFolders: state.ArrayFolders.map(u => {\n          if (u._id === action.folderId) {\n            return { ...u,\n              nameOfFolder: action.folderName\n            };\n          }\n\n          return { ...u\n          };\n        })\n      };\n\n    case \"iqura/folder/setCarToTheFolder\":\n      return { ...state,\n        ArrayFolders: state.ArrayFolders.map(u => {\n          if (u._id === action.folderId) {\n            return { ...u,\n              Cars: [...u.Cars, action.carFull]\n            };\n          }\n\n          return { ...u,\n            ...u.Cars\n          };\n        })\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  deleteId: (folderID, productID) => ({\n    type: 'deleteId',\n    folderID,\n    productID\n  }),\n  addNewFolder: folderData => ({\n    type: 'addNewFolder',\n    folderData\n  }),\n  changeName: (folderId, folderName) => ({\n    type: 'changeName',\n    folderId,\n    folderName\n  }),\n  setCarToTheFolder: (folderId, carFull) => ({\n    type: 'iqura/folder/setCarToTheFolder',\n    folderId,\n    carFull\n  })\n};\nexport const setCarToFolderThunk = (folderId, carId) => async (dispatch, getState) => {\n  let newId = uuid.v4();\n  let car = {\n    id: newId,\n    number: carId\n  };\n  dispatch(actions.setCarToTheFolder(folderId, car));\n};\nexport const setCarFromDB = () => async (dispatch, getState) => {\n  const car = await adminApi.getGoods();\n  console.log(car); //car.forEach( e => console.log(e));\n  //dispatch(actions.addNewFolder(m)\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/folderPageReducer.ts"],"names":["uuid","adminApi","initialState","ArrayFolders","_id","mainImg","nameOfFolder","Cars","id","number","folderReducer","state","action","type","map","u","folderID","filter","f","productID","folderData","folderId","folderName","carFull","actions","deleteId","addNewFolder","changeName","setCarToTheFolder","setCarToFolderThunk","carId","dispatch","getState","newId","v4","car","setCarFromDB","getGoods","console","log"],"mappings":"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","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\nimport * as uuid from \"uuid\";\nimport {adminApi} from \"../../Api/Api\";\n\ninterface infoType {\n    id: string,\n    number: number\n}\n\ninterface cars {\n    _id: string\n    mainImg: string,\n    nameOfFolder: string,\n    Cars: Array<infoType>\n}\n\nlet initialState = {\n    ArrayFolders: [\n        {\n            _id: 'FolderNumber1',\n            mainImg: '',\n            nameOfFolder: 'folder',\n            Cars: [\n                {id: '1', number: 334443119},\n                {id: '2', number: 334443120},\n                {id: '3', number: 334443121},\n            ] as Array<infoType>\n        },\n        {\n            _id: 'FolderNumber2',\n            mainImg: '' as string | null,\n            nameOfFolder: 'Temp Folder' as string,\n            Cars: [] as Array<infoType>\n        }\n    ] as Array<cars>\n}\ntype InitialState = typeof initialState;\nexport const folderReducer = (state = initialState, action: ActionsTypes): InitialState => {\n\n    switch (action.type) {\n        case \"deleteId\":\n            //debugger;\n            return {\n                ...state,\n                ArrayFolders: state.ArrayFolders.map(u => {\n                    if (u._id === action.folderID) {\n                        return {...u, Cars: u.Cars.filter(f => f.id != action.productID)}\n                    }\n                    return {...u, ...u.Cars};\n                })\n            }\n        case \"addNewFolder\":\n            return {\n                ...state,\n                ArrayFolders: [...state.ArrayFolders, action.folderData],\n            }\n        case \"changeName\":\n            return {\n                ...state,\n                ArrayFolders: state.ArrayFolders.map(u => {\n                    if (u._id === action.folderId) {\n                        return {...u, nameOfFolder: action.folderName};\n                    }\n                    return {...u};\n                })\n            }\n        case \"iqura/folder/setCarToTheFolder\":\n            return{\n                ...state,\n                ArrayFolders: state.ArrayFolders.map( u=>{\n                    if(u._id === action.folderId){\n                        return{...u, Cars: [...u.Cars,action.carFull]}\n                    }\n                    return{...u, ...u.Cars};\n                })\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    deleteId: (folderID: string, productID: string) => ({type: 'deleteId', folderID, productID} as const),\n    addNewFolder: (folderData: cars) => ({type: 'addNewFolder', folderData} as const),\n    changeName: (folderId: string, folderName: string) => ({type: 'changeName', folderId, folderName} as const),\n    setCarToTheFolder: (folderId: string, carFull: infoType) => ({type: 'iqura/folder/setCarToTheFolder', folderId, carFull} as const),\n\n}\nexport const setCarToFolderThunk = (folderId: string,carId:number):ThunkType => async (dispatch,getState) =>{\n    let newId = uuid.v4();\n    let car = {id: newId, number: carId};\n    dispatch(actions.setCarToTheFolder(folderId, car));\n\n}\nexport const setCarFromDB = ():ThunkType => async (dispatch,getState) =>{\n    const car = await adminApi.getGoods()\n    console.log(car);\n    //car.forEach( e => console.log(e));\n    //dispatch(actions.addNewFolder(m)\n\n\n}\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}