{"ast":null,"code":"let initialState = {\n  ArrayFolders: [{\n    folderId: 'FolderNumber1',\n    mainImg: '',\n    nameOfFolder: 'folder',\n    Cars: [{\n      id: '1',\n      number: 334443113\n    }, {\n      id: '2',\n      number: 334443115\n    }, {\n      id: '3',\n      number: 334443114\n    }]\n  }, {\n    folderId: 'FolderNumber2',\n    mainImg: '',\n    nameOfFolder: 'folder2',\n    Cars: [{\n      id: '3',\n      number: 334443118\n    }, {\n      id: '4',\n      number: 334443119\n    }, {\n      id: '5',\n      number: 334443119\n    }, {\n      id: '6',\n      number: 334443119\n    }, {\n      id: '7',\n      number: 334443119\n    }]\n  }]\n};\nexport const folderReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"deleteId\":\n      //debugger;\n      return { ...state,\n        ArrayFolders: state.ArrayFolders.map(u => {\n          if (u.folderId === action.folderID) {\n            return { ...u,\n              Cars: u.Cars.filter(f => f.id != action.productID)\n            };\n          }\n\n          return { ...u,\n            ...u.Cars\n          };\n        })\n      };\n\n    case \"addNewFolder\":\n      return { ...state,\n        ArrayFolders: [...state.ArrayFolders, action.folderData]\n      };\n\n    case \"changeName\":\n      return { ...state,\n        ArrayFolders: state.ArrayFolders.map(u => {\n          if (u.folderId === action.folderId) {\n            debugger;\n            return { ...u,\n              nameOfFolder: action.folderName\n            };\n          }\n\n          return { ...u\n          };\n        })\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  deleteId: (folderID, productID) => ({\n    type: 'deleteId',\n    folderID,\n    productID\n  }),\n  addNewFolder: folderData => ({\n    type: 'addNewFolder',\n    folderData\n  }),\n  changeName: (folderId, folderName) => ({\n    type: 'changeName',\n    folderId,\n    folderName\n  })\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/src/Redux/reducers/folderPageReducer.ts"],"names":["initialState","ArrayFolders","folderId","mainImg","nameOfFolder","Cars","id","number","folderReducer","state","action","type","map","u","folderID","filter","f","productID","folderData","folderName","actions","deleteId","addNewFolder","changeName"],"mappings":"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","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\n\ninterface infoType {\n    id: string,\n    number: number\n}\n\ninterface cars {\n    folderId: string\n    mainImg: string,\n    nameOfFolder: string,\n    Cars: Array<infoType>\n}\n\nlet initialState = {\n    ArrayFolders: [\n        {\n            folderId: 'FolderNumber1',\n            mainImg: '',\n            nameOfFolder: 'folder',\n            Cars: [\n                {id: '1', number: 334443113},\n                {id: '2', number: 334443115},\n                {id: '3', number: 334443114},\n            ] as Array<infoType>\n        },\n        {\n            folderId: 'FolderNumber2',\n            mainImg: '' as string | null,\n            nameOfFolder: 'folder2' as string,\n            Cars: [\n                {id: '3', number: 334443118},\n                {id: '4', number: 334443119},\n                {id: '5', number: 334443119},\n                {id: '6', number: 334443119},\n                {id: '7', number: 334443119},\n            ] as Array<infoType>\n        }\n    ] as Array<cars>\n}\ntype InitialState = typeof initialState;\nexport const folderReducer = (state = initialState, action: ActionsTypes): InitialState => {\n\n    switch (action.type) {\n        case \"deleteId\":\n            //debugger;\n            return {\n                ...state,\n                ArrayFolders: state.ArrayFolders.map(u => {\n                    if (u.folderId === action.folderID) {\n                        return {...u, Cars: u.Cars.filter(f => f.id != action.productID)}\n                    }\n                    return {...u, ...u.Cars};\n                })\n            }\n        case \"addNewFolder\":\n            return {\n                ...state,\n                ArrayFolders: [...state.ArrayFolders, action.folderData],\n            }\n        case \"changeName\":\n            return {\n                ...state,\n                ArrayFolders: state.ArrayFolders.map(u => {\n                    if (u.folderId === action.folderId) {\n                        debugger;\n                        return {...u, nameOfFolder: action.folderName};\n                    }\n                    return {...u};\n                })\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    deleteId: (folderID: string, productID: string) => ({type: 'deleteId', folderID, productID} as const),\n    addNewFolder: (folderData: cars) => ({type: 'addNewFolder', folderData} as const),\n    changeName: (folderId: string, folderName: string) => ({type: 'changeName', folderId, folderName} as const)\n}\n\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}