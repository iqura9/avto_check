{"ast":null,"code":"let initialState = {\n  MainNumberURL: ''\n};\nexport const showReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'newURL':\n      return { ...state,\n        MainNumberURL: action.url\n      };\n\n    case 'initProgram':\n      return { ...state,\n        MainNumberURL: JSON.parse(localStorage.getItem('mainURL') || \"\")\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  changeUrl: url => ({\n    type: 'newURL',\n    url\n  }),\n  setInitializeProgram: () => ({\n    type: 'initProgram'\n  })\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/showPageReducer.ts"],"names":["initialState","MainNumberURL","showReducer","state","action","type","url","JSON","parse","localStorage","getItem","actions","changeUrl","setInitializeProgram"],"mappings":"AAOA,IAAIA,YAAY,GAAG;AACfC,EAAAA,aAAa,EAAC;AADC,CAAnB;AAIA,OAAO,MAAMC,WAAW,GAAG,YAAyD;AAAA,MAAxDC,KAAwD,uEAAlDH,YAAkD;AAAA,MAApCI,MAAoC;;AAEhF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AACI,aAAM,EACF,GAAGF,KADD;AAEFF,QAAAA,aAAa,EAAEG,MAAM,CAACE;AAFpB,OAAN;;AAIJ,SAAK,aAAL;AACI,aAAM,EACF,GAAGH,KADD;AAEFF,QAAAA,aAAa,EAACM,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,KAAmC,EAA9C;AAFZ,OAAN;;AAIJ;AAAS;AACL,eAAOP,KAAP;AACH;AAbL;AAeH,CAjBM;AAmBP,OAAO,MAAMQ,OAAO,GAAG;AACnBC,EAAAA,SAAS,EAAGN,GAAD,KAA0B;AAACD,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA;AAAjB,GAA1B,CADQ;AAEnBO,EAAAA,oBAAoB,EAAE,OAAO;AAACR,IAAAA,IAAI,EAAE;AAAP,GAAP;AAFH,CAAhB","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\n\ninterface infoType {\n    id: number,\n    number: number\n}\n\nlet initialState = {\n    MainNumberURL:'' as string | number,\n}\ntype InitialState = typeof initialState;\nexport const showReducer = (state=initialState, action:ActionsTypes):InitialState =>{\n\n    switch (action.type) {\n        case 'newURL':\n            return{\n                ...state,\n                MainNumberURL: action.url\n            }\n        case 'initProgram':\n            return{\n                ...state,\n                MainNumberURL:JSON.parse(localStorage.getItem('mainURL') || \"\"),\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    changeUrl: (url:string | number) => ({type: 'newURL', url} as const),\n    setInitializeProgram: () => ({type: 'initProgram',} as const),\n}\n\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}