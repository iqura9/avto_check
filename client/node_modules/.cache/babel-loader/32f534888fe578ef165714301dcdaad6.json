{"ast":null,"code":"import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport { showReducer } from \"./reducers/showPageReducer\";\nimport * as thunk from \"redux-thunk\";\nlet RootReducers = combineReducers({\n  showPage: showReducer\n});\nlet store = createStore(RootReducers, applyMiddleware(thunk.default)); // @ts-ignore\n\nwindow.store = store;\nexport default store;","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/src/Redux/Redux-store.ts"],"names":["applyMiddleware","combineReducers","createStore","showReducer","thunk","RootReducers","showPage","store","default","window"],"mappings":"AAAA,SAAgBA,eAAhB,EAAiCC,eAAjC,EAAkDC,WAAlD,QAAoE,OAApE;AACA,SAAQC,WAAR,QAA0B,4BAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;AAGA,IAAIC,YAAY,GAAEJ,eAAe,CAAC;AAC9BK,EAAAA,QAAQ,EAAEH;AADoB,CAAD,CAAjC;AASA,IAAII,KAAK,GAAGL,WAAW,CAACG,YAAD,EAAcL,eAAe,CAACI,KAAK,CAACI,OAAP,CAA7B,CAAvB,C,CACA;;AACAC,MAAM,CAACF,KAAP,GAAeA,KAAf;AAEA,eAAeA,KAAf","sourcesContent":["import {Action, applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {showReducer} from \"./reducers/showPageReducer\";\nimport * as thunk from \"redux-thunk\";\nimport {ThunkAction} from \"redux-thunk\";\n\nlet RootReducers= combineReducers({\n    showPage: showReducer\n});\n\ntype RootReducerType = typeof RootReducers;\nexport type AppStateType = ReturnType<RootReducerType>\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\nlet store = createStore(RootReducers,applyMiddleware(thunk.default));\n// @ts-ignore\nwindow.store = store;\n\nexport default store;"]},"metadata":{},"sourceType":"module"}