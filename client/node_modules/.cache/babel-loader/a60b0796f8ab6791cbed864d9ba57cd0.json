{"ast":null,"code":"import { adminApi } from \"../../Api/Api\";\nlet initialState = {\n  ArrayFolders: []\n};\nexport const adminFolderReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"setFromAdnimDB\":\n      return { ...state,\n        ArrayFolders: action.folderData\n      };\n\n    case \"deleteId\":\n      return { ...state,\n        ArrayFolders: state.ArrayFolders.map(u => {\n          if (u._id === action.folderID) {\n            return { ...u,\n              Cars: u.Cars.filter(f => f.id != action.productID)\n            };\n          }\n\n          return { ...u,\n            ...u.Cars\n          };\n        })\n      };\n\n    case \"deleteFolderById\":\n      return { ...state,\n        ArrayFolders: state.ArrayFolders.filter(f => f._id != action.folderID)\n      };\n\n    case \"addNewAdminFolder\":\n      return { ...state,\n        ArrayFolders: [...state.ArrayFolders, action.folderData]\n      };\n\n    case \"changeName\":\n      return { ...state,\n        ArrayFolders: state.ArrayFolders.map(u => {\n          if (u._id === action.folderId) {\n            return { ...u,\n              nameOfFolder: action.folderName\n            };\n          }\n\n          return { ...u\n          };\n        })\n      };\n\n    case \"iqura/folder/setCarToTheFolder\":\n      return { ...state,\n        ArrayFolders: state.ArrayFolders.map(u => {\n          if (u._id === action.folderId) {\n            return { ...u,\n              Cars: [...u.Cars, action.carFull]\n            };\n          }\n\n          return { ...u,\n            ...u.Cars\n          };\n        })\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  deleteId: (folderID, productID) => ({\n    type: 'deleteId',\n    folderID,\n    productID\n  }),\n  deleteFolderById: folderID => ({\n    type: 'deleteFolderById',\n    folderID\n  }),\n  addNewAdminFolder: folderData => ({\n    type: 'addNewAdminFolder',\n    folderData\n  }),\n  setFromAdnimDB: folderData => ({\n    type: 'setFromAdnimDB',\n    folderData\n  }),\n  changeName: (folderId, folderName) => ({\n    type: 'changeName',\n    folderId,\n    folderName\n  }),\n  setCarToTheFolder: (folderId, carFull) => ({\n    type: 'iqura/folder/setCarToTheFolder',\n    folderId,\n    carFull\n  })\n};\nexport const deleteCarThunk = (folderId, productID) => async (dispatch, getState) => {\n  if (dispatch(actions.deleteId(folderId, productID))) {\n    const carToSend = await getState().folderPage.ArrayFolders.find(f => f._id == folderId);\n    await adminApi.updateFolderName(folderId, carToSend);\n  }\n};\nexport const setAdminFolderToRedux = () => async (dispatch, getState) => {\n  const car = await adminApi.getGoods();\n  dispatch(actions.setFromAdnimDB(car));\n};\nexport const addNewFolder = data => async (dispatch, getState) => {\n  const car = await adminApi.addIdOfCar(data);\n  dispatch(actions.addNewAdminFolder(car));\n};\nexport const chnageNameFolderThunk = (folderId, folderName) => async (dispatch, getState) => {\n  if (dispatch(actions.changeName(folderId, folderName))) {\n    const car = await getState().folderPage.ArrayFolders.find(f => f._id == folderId);\n    await adminApi.updateFolderName(folderId, car);\n  }\n};\nexport const deleteFolderX = (id, userId) => async (dispatch, getState) => {\n  try {\n    await adminApi.deleteFolder(id, userId);\n    dispatch(actions.deleteFolderById(id));\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const setClearFolder = () => async (dispatch, getState) => {\n  dispatch(actions.setFromDB([]));\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/adminFolderPageReducer.ts"],"names":["adminApi","initialState","ArrayFolders","adminFolderReducer","state","action","type","folderData","map","u","_id","folderID","Cars","filter","f","id","productID","folderId","nameOfFolder","folderName","carFull","actions","deleteId","deleteFolderById","addNewAdminFolder","setFromAdnimDB","changeName","setCarToTheFolder","deleteCarThunk","dispatch","getState","carToSend","folderPage","find","updateFolderName","setAdminFolderToRedux","car","getGoods","addNewFolder","data","addIdOfCar","chnageNameFolderThunk","deleteFolderX","userId","deleteFolder","e","console","log","setClearFolder","setFromDB"],"mappings":"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","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\nimport * as uuid from \"uuid\";\nimport {adminApi} from \"../../Api/Api\";\n\ninterface infoType {\n    id: string,\n    number: number\n}\n\nexport interface cars {\n    _id: string\n    mainImg: string,\n    nameOfFolder: string,\n    Cars: Array<infoType>\n}\n\nlet initialState = {\n    ArrayFolders: [] as Array<cars>\n}\ntype InitialState = typeof initialState;\nexport const adminFolderReducer = (state = initialState, action: ActionsTypes): InitialState => {\n\n    switch (action.type) {\n        case \"setFromAdnimDB\":\n            return {\n                ...state,\n                ArrayFolders: action.folderData\n            }\n        case \"deleteId\":\n            return {\n                ...state,\n                ArrayFolders: state.ArrayFolders.map(u => {\n                    if (u._id === action.folderID) {\n                        return {...u, Cars: u.Cars.filter(f => f.id != action.productID)}\n                    }\n                    return {...u, ...u.Cars};\n                })\n            }\n        case \"deleteFolderById\":\n            return {\n                ...state,\n                ArrayFolders: state.ArrayFolders.filter(f => f._id != action.folderID),\n            }\n        case \"addNewAdminFolder\":\n            return {\n                ...state,\n                ArrayFolders: [...state.ArrayFolders, action.folderData],\n            }\n        case \"changeName\":\n            return {\n                ...state,\n                ArrayFolders: state.ArrayFolders.map(u => {\n                    if (u._id === action.folderId) {\n                        return {...u, nameOfFolder: action.folderName};\n                    }\n                    return {...u};\n                })\n            }\n        case \"iqura/folder/setCarToTheFolder\":\n            return{\n                ...state,\n                ArrayFolders: state.ArrayFolders.map( u=>{\n                    if(u._id === action.folderId){\n                        return{...u, Cars: [...u.Cars,action.carFull]}\n                    }\n                    return{...u, ...u.Cars};\n                })\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    deleteId: (folderID: string, productID: string) => ({type: 'deleteId', folderID, productID} as const),\n    deleteFolderById: (folderID: string) => ({type: 'deleteFolderById', folderID} as const),\n    addNewAdminFolder: (folderData: cars) => ({type: 'addNewAdminFolder', folderData} as const),\n    setFromAdnimDB: (folderData: Array<cars>) => ({type: 'setFromAdnimDB', folderData} as const),\n    changeName: (folderId: string, folderName: string) => ({type: 'changeName', folderId, folderName} as const),\n    setCarToTheFolder: (folderId: string, carFull: infoType) => ({type: 'iqura/folder/setCarToTheFolder', folderId, carFull} as const),\n\n}\n\nexport const deleteCarThunk = (folderId:string,productID:string):ThunkType => async (dispatch,getState) =>{\n    if(dispatch(actions.deleteId(folderId,productID))){\n        const carToSend = await getState().folderPage.ArrayFolders.find(f => f._id == folderId);\n        await adminApi.updateFolderName(folderId,carToSend);\n    }\n}\n\nexport const setAdminFolderToRedux = ():ThunkType => async (dispatch,getState) =>{\n    const car = await adminApi.getGoods();\n    dispatch(actions.setFromAdnimDB(car));\n}\nexport const addNewFolder = (data:any):ThunkType => async (dispatch,getState) =>{\n\n    const car = await adminApi.addIdOfCar(data);\n    dispatch(actions.addNewAdminFolder(car));\n}\nexport const chnageNameFolderThunk = (folderId:string,folderName:string):ThunkType => async (dispatch,getState) =>{\n    if(dispatch(actions.changeName(folderId,folderName))){\n        const car = await getState().folderPage.ArrayFolders.find(f => f._id == folderId);\n        await adminApi.updateFolderName(folderId,car);\n    }\n}\nexport const deleteFolderX = (id:string, userId:any):ThunkType => async (dispatch,getState) =>{\n    try{\n        await adminApi.deleteFolder(id,userId);\n        dispatch(actions.deleteFolderById(id));\n    }catch (e){\n        console.log(e);\n    }\n}\n\nexport const setClearFolder = ():ThunkType => async (dispatch,getState) =>{\n    dispatch(actions.setFromDB([]))\n}\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}