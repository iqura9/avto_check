{"ast":null,"code":"let initialState = {\n  ArrayFolders: [{\n    folderId: 'FolderNumber1',\n    mainImg: '',\n    nameOfFolder: 'folder',\n    Cars: [{\n      id: '1',\n      number: 334443113\n    }, {\n      id: '2',\n      number: 334443115\n    }, {\n      id: '3',\n      number: 334443114\n    }]\n  }, {\n    folderId: 'FolderNumber2',\n    mainImg: '',\n    nameOfFolder: 'folder2',\n    Cars: [{\n      id: '3',\n      number: 334443118\n    }, {\n      id: '4',\n      number: 334443119\n    }, {\n      id: '5',\n      number: 334443119\n    }, {\n      id: '6',\n      number: 334443119\n    }, {\n      id: '7',\n      number: 334443119\n    }]\n  }]\n};\nexport const folderReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"deleteId\":\n      //debugger;\n      return { ...state,\n        ArrayFolders: state.ArrayFolders.map(u => {\n          if (u.folderId === action.folderID) {\n            return { ...u,\n              Cars: u.Cars.filter(f => f.id != action.productID)\n            };\n          }\n\n          return { ...u,\n            ...u.Cars\n          };\n        })\n      };\n\n    case \"addNewFolder\":\n      return { ...state,\n        ArrayFolders: [...state.ArrayFolders, action.folderData]\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  deleteId: (folderID, productID) => ({\n    type: 'deleteId',\n    folderID,\n    productID\n  }),\n  addNewFolder: folderData => ({\n    type: 'addNewFolder',\n    folderData\n  })\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/src/Redux/reducers/folderPageReducer.ts"],"names":["initialState","ArrayFolders","folderId","mainImg","nameOfFolder","Cars","id","number","folderReducer","state","action","type","map","u","folderID","filter","f","productID","folderData","actions","deleteId","addNewFolder"],"mappings":"AAaA,IAAIA,YAAY,GAAG;AACfC,EAAAA,YAAY,EAAC,CACT;AACIC,IAAAA,QAAQ,EAAC,eADb;AAEIC,IAAAA,OAAO,EAAE,EAFb;AAGIC,IAAAA,YAAY,EAAE,QAHlB;AAIIC,IAAAA,IAAI,EAAC,CACD;AAACC,MAAAA,EAAE,EAAC,GAAJ;AAASC,MAAAA,MAAM,EAAE;AAAjB,KADC,EAED;AAACD,MAAAA,EAAE,EAAC,GAAJ;AAASC,MAAAA,MAAM,EAAE;AAAjB,KAFC,EAGD;AAACD,MAAAA,EAAE,EAAC,GAAJ;AAASC,MAAAA,MAAM,EAAE;AAAjB,KAHC;AAJT,GADS,EAWT;AACIL,IAAAA,QAAQ,EAAE,eADd;AAEIC,IAAAA,OAAO,EAAE,EAFb;AAGIC,IAAAA,YAAY,EAAE,SAHlB;AAIIC,IAAAA,IAAI,EAAC,CACD;AAACC,MAAAA,EAAE,EAAC,GAAJ;AAASC,MAAAA,MAAM,EAAE;AAAjB,KADC,EAED;AAACD,MAAAA,EAAE,EAAC,GAAJ;AAASC,MAAAA,MAAM,EAAE;AAAjB,KAFC,EAGD;AAACD,MAAAA,EAAE,EAAC,GAAJ;AAASC,MAAAA,MAAM,EAAE;AAAjB,KAHC,EAID;AAACD,MAAAA,EAAE,EAAC,GAAJ;AAASC,MAAAA,MAAM,EAAE;AAAjB,KAJC,EAKD;AAACD,MAAAA,EAAE,EAAC,GAAJ;AAASC,MAAAA,MAAM,EAAE;AAAjB,KALC;AAJT,GAXS;AADE,CAAnB;AA2BA,OAAO,MAAMC,aAAa,GAAG,YAAyD;AAAA,MAAxDC,KAAwD,uEAAlDT,YAAkD;AAAA,MAApCU,MAAoC;;AAElF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,UAAL;AACI;AACA,aAAM,EACF,GAAGF,KADD;AAEFR,QAAAA,YAAY,EAAEQ,KAAK,CAACR,YAAN,CAAmBW,GAAnB,CAAwBC,CAAC,IAAG;AACtC,cAAGA,CAAC,CAACX,QAAF,KAAeQ,MAAM,CAACI,QAAzB,EAAkC;AAC7B,mBAAO,EAAC,GAAGD,CAAJ;AAAOR,cAAAA,IAAI,EAAEQ,CAAC,CAACR,IAAF,CAAOU,MAAP,CAAcC,CAAC,IAAIA,CAAC,CAACV,EAAF,IAAQI,MAAM,CAACO,SAAlC;AAAb,aAAP;AACJ;;AACD,iBAAO,EAAC,GAAGJ,CAAJ;AAAQ,eAAGA,CAAC,CAACR;AAAb,WAAP;AACH,SALa;AAFZ,OAAN;;AASJ,SAAK,cAAL;AACI,aAAM,EACF,GAAGI,KADD;AAEFR,QAAAA,YAAY,EAAE,CAAC,GAAGQ,KAAK,CAACR,YAAV,EAAuBS,MAAM,CAACQ,UAA9B;AAFZ,OAAN;;AAIJ;AAAS;AACL,eAAOT,KAAP;AACH;AAnBL;AAqBH,CAvBM;AAyBP,OAAO,MAAMU,OAAO,GAAG;AACnBC,EAAAA,QAAQ,EAAE,CAACN,QAAD,EAAkBG,SAAlB,MAAwC;AAACN,IAAAA,IAAI,EAAE,UAAP;AAAmBG,IAAAA,QAAnB;AAA6BG,IAAAA;AAA7B,GAAxC,CADS;AAEnBI,EAAAA,YAAY,EAAGH,UAAD,KAAsB;AAACP,IAAAA,IAAI,EAAE,cAAP;AAAsBO,IAAAA;AAAtB,GAAtB;AAFK,CAAhB","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\n\ninterface infoType {\n    id: string,\n    number: number\n}\ninterface cars {\n    folderId:number | string\n    mainImg: string,\n    nameOfFolder: string,\n    Cars: Array<infoType>\n}\n\nlet initialState = {\n    ArrayFolders:[\n        {\n            folderId:'FolderNumber1',\n            mainImg: '',\n            nameOfFolder: 'folder',\n            Cars:[\n                {id:'1', number: 334443113},\n                {id:'2', number: 334443115},\n                {id:'3', number: 334443114},\n            ] as Array<infoType>\n        },\n        {\n            folderId: 'FolderNumber2',\n            mainImg: '' as string | null,\n            nameOfFolder: 'folder2' as string,\n            Cars:[\n                {id:'3', number: 334443118},\n                {id:'4', number: 334443119},\n                {id:'5', number: 334443119},\n                {id:'6', number: 334443119},\n                {id:'7', number: 334443119},\n            ] as Array<infoType>\n        }\n    ] as Array<cars>\n}\ntype InitialState = typeof initialState;\nexport const folderReducer = (state=initialState, action:ActionsTypes):InitialState =>{\n\n    switch (action.type) {\n        case \"deleteId\":\n            //debugger;\n            return{\n                ...state,\n                ArrayFolders: state.ArrayFolders.map( u=> {\n                    if(u.folderId === action.folderID){\n                         return {...u, Cars: u.Cars.filter(f => f.id != action.productID)}\n                    }\n                    return {...u , ...u.Cars};\n                })\n            }\n        case \"addNewFolder\":\n            return{\n                ...state,\n                ArrayFolders: [...state.ArrayFolders,action.folderData]\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    deleteId: (folderID:string, productID:string) => ({type: 'deleteId', folderID, productID} as const),\n    addNewFolder: (folderData:cars) => ({type: 'addNewFolder',folderData} as const)\n}\n\n\n\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}