{"ast":null,"code":"import { adminApi } from \"../../Api/Api\";\nimport { setClearFolder } from \"./folderPageReducer\";\nlet initialState = {\n  _id: '',\n  email: '',\n  avatar: null,\n  avatarId: null,\n  lastName: '',\n  firstName: '',\n  gender: null,\n  address: null,\n  profession: '',\n  searchField: '',\n  phone: '',\n  roles: '',\n  folders: [],\n  accessToken: null\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"SET_AUTH_USER\":\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setAuthUserAC: payload => ({\n    type: 'SET_AUTH_USER',\n    payload\n  })\n};\nexport const authMeTC = () => async dispatch => {\n  if (localStorage.getItem(\"profile\")) {\n    const storedProfile = await JSON.parse(localStorage.getItem(\"profile\") || '');\n    dispatch(actions.setAuthUserAC(storedProfile));\n  }\n};\nexport const deleteProfileTC = () => async (dispatch, getState) => {\n  const clearProfile = {\n    _id: '',\n    email: '',\n    avatar: null,\n    avatarId: null,\n    lastName: '',\n    firstName: '',\n    gender: null,\n    address: null,\n    profession: '',\n    searchField: '',\n    phone: '',\n    roles: '',\n    folders: [],\n    accessToken: null\n  };\n  dispatch(setClearFolder());\n  dispatch(actions.setAuthUserAC(clearProfile));\n};\nexport const loginTC = (data, history) => async dispatch => {\n  try {\n    let response = await adminApi.loginMe(data);\n    await localStorage.setItem(\"profile\", JSON.stringify(response));\n    dispatch(authMeTC());\n    history.push({\n      pathname: '/'\n    });\n  } catch (e) {\n    console.log(\"FUCK\");\n  }\n};\nexport const registerTC = (data, history) => async dispatch => {\n  try {\n    data = { ...data,\n      gender: 'male'\n    };\n    let response = await adminApi.signUp(data);\n    alert('Акаунт створено');\n    history.push({\n      pathname: '/login'\n    });\n  } catch (e) {\n    alert(e);\n    console.log(\"FUCK\");\n  }\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/authReducer.ts"],"names":["adminApi","setClearFolder","initialState","_id","email","avatar","avatarId","lastName","firstName","gender","address","profession","searchField","phone","roles","folders","accessToken","authReducer","state","action","type","payload","actions","setAuthUserAC","authMeTC","dispatch","localStorage","getItem","storedProfile","JSON","parse","deleteProfileTC","getState","clearProfile","loginTC","data","history","response","loginMe","setItem","stringify","push","pathname","e","console","log","registerTC","signUp","alert"],"mappings":"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","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\nimport {adminApi} from \"../../Api/Api\";\nimport {setClearFolder} from \"./folderPageReducer\";\n\ninterface IAddress {\n    country: string | null;\n    city: string | null;\n    addressLine1: string | null;\n    addressLine2: string | null;\n}\n\nlet initialState = {\n    _id: '' as string,\n        email: '' as string,\n        avatar: null as null | string,\n        avatarId: null as null | string,\n        lastName: '' as string,\n        firstName: '' as string,\n        gender: null as null | string,\n        address: null as null | IAddress,\n        profession: '' as string,\n        searchField: '' as string,\n        phone: '' as string,\n        roles: '' as string | Array<string>,\n        folders: [] as Array<any>,\n        accessToken: null as null | string,\n}\n\ntype initialStateType = typeof initialState;\nexport const authReducer = (state = initialState, action: ActionsTypes): initialStateType => {\n\n    switch (action.type) {\n        case \"SET_AUTH_USER\":\n            return {\n                ...state,\n                ...action.payload\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    setAuthUserAC: (payload: initialStateType) => ({type: 'SET_AUTH_USER', payload} as const),\n}\nexport const authMeTC = (): ThunkType => async (dispatch: any) => {\n    if(localStorage.getItem(\"profile\")){\n        const storedProfile = await JSON.parse(localStorage.getItem(\"profile\") || '');\n        dispatch(actions.setAuthUserAC(storedProfile));\n    }\n\n\n}\nexport const deleteProfileTC = (): ThunkType => async (dispatch: any , getState) => {\n    const clearProfile={\n        _id: '',\n        email: '',\n        avatar: null,\n        avatarId: null,\n        lastName: '',\n        firstName: '',\n        gender: null,\n        address: null,\n        profession: '',\n        searchField: '',\n        phone: '',\n        roles: '',\n        folders: [],\n        accessToken: null,\n    }\n    dispatch(setClearFolder());\n    dispatch(actions.setAuthUserAC(clearProfile));\n}\n\nexport const loginTC = (data: { email: string, password: string },history:any): ThunkType => async (dispatch: any) => {\n    try {\n        let response = await adminApi.loginMe(data);\n        await localStorage.setItem(\"profile\", JSON.stringify(response));\n        dispatch(authMeTC());\n        history.push({pathname: '/'});\n    } catch (e) {\n        console.log(\"FUCK\");\n    }\n}\nexport const registerTC = (data: any ,history:any): ThunkType => async (dispatch: any) => {\n    try {\n        data = {...data,gender:'male'};\n        let response = await adminApi.signUp(data);\n        alert('Акаунт створено')\n        history.push({pathname: '/login'});\n    } catch (e) {\n        alert(e);\n        console.log(\"FUCK\");\n    }\n}\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}