{"ast":null,"code":"let initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'newURL':\n      return { ...state\n      };\n\n    case 'initProgram':\n      return { ...state\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport const actions = {\n  setAuthUserAC: () => ({\n    type: 'newURL',\n    url\n  }),\n  setInitializeProgram: () => ({\n    type: 'initProgram'\n  })\n};","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/authReducer.ts"],"names":["initialState","id","email","login","isAuth","authReducer","state","action","type","actions","setAuthUserAC","url","setInitializeProgram"],"mappings":"AAEA,IAAIA,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;AAQA,OAAO,MAAMC,WAAW,GAAG,YAA6D;AAAA,MAA5DC,KAA4D,uEAAtDN,YAAsD;AAAA,MAAxCO,MAAwC;;AAEpF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AACI,aAAM,EACF,GAAGF;AADD,OAAN;;AAGJ,SAAK,aAAL;AACI,aAAM,EACF,GAAGA;AADD,OAAN;;AAGJ;AAAS;AACL,eAAOA,KAAP;AACH;AAXL;AAaH,CAfM;AAiBP,OAAO,MAAMG,OAAO,GAAG;AACnBC,EAAAA,aAAa,EAAG,OAAO;AAACF,IAAAA,IAAI,EAAE,QAAP;AAAiBG,IAAAA;AAAjB,GAAP,CADG;AAEnBC,EAAAA,oBAAoB,EAAE,OAAO;AAACJ,IAAAA,IAAI,EAAE;AAAP,GAAP;AAFH,CAAhB","sourcesContent":["import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\n\nlet initialState = {\n    id: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false as boolean\n}\n\ntype initialStateType = typeof initialState;\nexport const authReducer = (state=initialState, action:ActionsTypes):initialStateType =>{\n\n    switch (action.type) {\n        case 'newURL':\n            return{\n                ...state,\n            }\n        case 'initProgram':\n            return{\n                ...state,\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    setAuthUserAC : () => ({type: 'newURL', url} as const),\n    setInitializeProgram: () => ({type: 'initProgram',} as const),\n\n}\n\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>"]},"metadata":{},"sourceType":"module"}