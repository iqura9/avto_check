{"ast":null,"code":"var _jsxFileName = \"/Users/iqura/web_storm_projects/avto/client/src/UI/loginForm/Login.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  var _errors$username, _errors$password;\n\n  const router = useRouter(); // form validation rules\n\n  const validationSchema = Yup.object().shape({\n    username: Yup.string().required('Username is required'),\n    password: Yup.string().required('Password is required')\n  });\n  const formOptions = {\n    resolver: yupResolver(validationSchema)\n  }; // get functions to build form with useForm() hook\n\n  const {\n    register,\n    handleSubmit,\n    formState\n  } = useForm(formOptions);\n  const {\n    errors\n  } = formState;\n\n  function onSubmit(_ref) {\n    let {\n      username,\n      password\n    } = _ref;\n    return userService.login(username, password).then(() => {\n      // get return url from query parameters or default to '/'\n      const returnUrl = router.query.returnUrl || '/';\n      router.push(returnUrl);\n    }).catch(alertService.error);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"card-header\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(onSubmit),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"username\",\n              type: \"text\",\n              ...register('username'),\n              className: `form-control ${errors.username ? 'is-invalid' : ''}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: (_errors$username = errors.username) === null || _errors$username === void 0 ? void 0 : _errors$username.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"password\",\n              type: \"password\",\n              ...register('password'),\n              className: `form-control ${errors.password ? 'is-invalid' : ''}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: formState.isSubmitting,\n            className: \"btn btn-primary\",\n            children: [formState.isSubmitting && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"spinner-border spinner-border-sm mr-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 60\n            }, this), \"Login\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            href: \"/account/register\",\n            className: \"btn btn-link\",\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Login, \"yviHlOYEr8tC7202xjOQvLc9/RQ=\", true);\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/iqura/web_storm_projects/avto/client/src/UI/loginForm/Login.tsx"],"names":["React","Login","router","useRouter","validationSchema","Yup","object","shape","username","string","required","password","formOptions","resolver","yupResolver","register","handleSubmit","formState","useForm","errors","onSubmit","userService","login","then","returnUrl","query","push","catch","alertService","error","message","isSubmitting"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst Login:React.FC<{}> = () => {\n\n        const router = useRouter();\n\n        // form validation rules\n        const validationSchema = Yup.object().shape({\n            username: Yup.string().required('Username is required'),\n            password: Yup.string().required('Password is required')\n        });\n        const formOptions = { resolver: yupResolver(validationSchema) };\n\n        // get functions to build form with useForm() hook\n        const { register, handleSubmit, formState } = useForm(formOptions);\n        const { errors } = formState;\n\n        function onSubmit({ username, password }) {\n            return userService.login(username, password)\n                .then(() => {\n                    // get return url from query parameters or default to '/'\n                    const returnUrl = router.query.returnUrl || '/';\n                    router.push(returnUrl);\n                })\n                .catch(alertService.error);\n        }\n\n        return (\n            <Layout>\n                <div className=\"card\">\n                    <h4 className=\"card-header\">Login</h4>\n                    <div className=\"card-body\">\n                        <form onSubmit={handleSubmit(onSubmit)}>\n                            <div className=\"form-group\">\n                                <label>Username</label>\n                                <input name=\"username\" type=\"text\" {...register('username')} className={`form-control ${errors.username ? 'is-invalid' : ''}`} />\n                                <div className=\"invalid-feedback\">{errors.username?.message}</div>\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Password</label>\n                                <input name=\"password\" type=\"password\" {...register('password')} className={`form-control ${errors.password ? 'is-invalid' : ''}`} />\n                                <div className=\"invalid-feedback\">{errors.password?.message}</div>\n                            </div>\n                            <button disabled={formState.isSubmitting} className=\"btn btn-primary\">\n                                {formState.isSubmitting && <span className=\"spinner-border spinner-border-sm mr-1\"></span>}\n                                Login\n                            </button>\n                            <Link href=\"/account/register\" className=\"btn btn-link\">Register</Link>\n                        </form>\n                    </div>\n                </div>\n            </Layout>\n        );\n\n};\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}