[{"/Users/iqura/web_storm_projects/avto/client/src/index.tsx":"1","/Users/iqura/web_storm_projects/avto/client/src/reportWebVitals.js":"2","/Users/iqura/web_storm_projects/avto/client/src/App.tsx":"3","/Users/iqura/web_storm_projects/avto/client/src/Redux/Redux-store.ts":"4","/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/folderPageReducer.ts":"5","/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/showPageReducer.ts":"6","/Users/iqura/web_storm_projects/avto/client/src/UI/FIRST_PAGE/MainPage.tsx":"7","/Users/iqura/web_storm_projects/avto/client/src/UI/Header/Header.tsx":"8","/Users/iqura/web_storm_projects/avto/client/src/UI/Folder/folderInfo.tsx":"9","/Users/iqura/web_storm_projects/avto/client/src/UI/FIRST_PAGE/SearchingCar.tsx":"10","/Users/iqura/web_storm_projects/avto/client/src/UI/Folder/Folder.tsx":"11","/Users/iqura/web_storm_projects/avto/client/src/UI/FIRST_PAGE/ShowImgInRow.tsx":"12","/Users/iqura/web_storm_projects/avto/client/src/Api/Api.tsx":"13","/Users/iqura/web_storm_projects/avto/client/src/UI/Preloader/Preloader.tsx":"14","/Users/iqura/web_storm_projects/avto/client/src/UI/show_array/ShowArray.tsx":"15","/Users/iqura/web_storm_projects/avto/client/src/UI/show_array/CarImg.tsx":"16"},{"size":688,"mtime":1642935206144,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1642436694410,"results":"19","hashOfConfig":"18"},{"size":1523,"mtime":1644766153903,"results":"20","hashOfConfig":"18"},{"size":819,"mtime":1644145776936,"results":"21","hashOfConfig":"18"},{"size":4232,"mtime":1644756357280,"results":"22","hashOfConfig":"18"},{"size":970,"mtime":1644762088541,"results":"23","hashOfConfig":"18"},{"size":3219,"mtime":1644772260387,"results":"24","hashOfConfig":"18"},{"size":1356,"mtime":1644762277892,"results":"25","hashOfConfig":"18"},{"size":914,"mtime":1644762214218,"results":"26","hashOfConfig":"18"},{"size":2796,"mtime":1644770234427,"results":"27","hashOfConfig":"18"},{"size":4192,"mtime":1644762609944,"results":"28","hashOfConfig":"18"},{"size":1460,"mtime":1644762202532,"results":"29","hashOfConfig":"18"},{"size":1021,"mtime":1644755773580,"results":"30","hashOfConfig":"18"},{"size":232,"mtime":1644751948409,"results":"31","hashOfConfig":"18"},{"size":2157,"mtime":1644772158895,"results":"32","hashOfConfig":"18"},{"size":871,"mtime":1644773138767,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4bts25",{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/iqura/web_storm_projects/avto/client/src/index.tsx",[],"/Users/iqura/web_storm_projects/avto/client/src/reportWebVitals.js",[],"/Users/iqura/web_storm_projects/avto/client/src/App.tsx",[],"/Users/iqura/web_storm_projects/avto/client/src/Redux/Redux-store.ts",[],"/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/folderPageReducer.ts",["74","75","76","77"],"import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\nimport * as uuid from \"uuid\";\nimport {adminApi} from \"../../Api/Api\";\n\ninterface infoType {\n    id: string,\n    number: number\n}\n\nexport interface cars {\n    _id: string\n    mainImg: string,\n    nameOfFolder: string,\n    Cars: Array<infoType>\n}\n\nlet initialState = {\n    ArrayFolders: [] as Array<cars>\n}\ntype InitialState = typeof initialState;\nexport const folderReducer = (state = initialState, action: ActionsTypes): InitialState => {\n\n    switch (action.type) {\n        case \"setFromDB\":\n            return {\n                ...state,\n                ArrayFolders: action.folderData\n            }\n        case \"deleteId\":\n            //debugger;\n            return {\n                ...state,\n                ArrayFolders: state.ArrayFolders.map(u => {\n                    if (u._id === action.folderID) {\n                        return {...u, Cars: u.Cars.filter(f => f.id != action.productID)}\n                    }\n                    return {...u, ...u.Cars};\n                })\n            }\n        case \"addNewFolder\":\n            return {\n                ...state,\n                ArrayFolders: [...state.ArrayFolders, action.folderData],\n            }\n        case \"changeName\":\n            return {\n                ...state,\n                ArrayFolders: state.ArrayFolders.map(u => {\n                    if (u._id === action.folderId) {\n                        return {...u, nameOfFolder: action.folderName};\n                    }\n                    return {...u};\n                })\n            }\n        case \"iqura/folder/setCarToTheFolder\":\n            return{\n                ...state,\n                ArrayFolders: state.ArrayFolders.map( u=>{\n                    if(u._id === action.folderId){\n                        return{...u, Cars: [...u.Cars,action.carFull]}\n                    }\n                    return{...u, ...u.Cars};\n                })\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    deleteId: (folderID: string, productID: string) => ({type: 'deleteId', folderID, productID} as const),\n    addNewFolder: (folderData: cars) => ({type: 'addNewFolder', folderData} as const),\n    setFromDB: (folderData: Array<cars>) => ({type: 'setFromDB', folderData} as const),\n    changeName: (folderId: string, folderName: string) => ({type: 'changeName', folderId, folderName} as const),\n    setCarToTheFolder: (folderId: string, carFull: infoType) => ({type: 'iqura/folder/setCarToTheFolder', folderId, carFull} as const),\n\n}\n\nexport const deleteCarThunk = (folderId:string,productID:string):ThunkType => async (dispatch,getState) =>{\n    if(dispatch(actions.deleteId(folderId,productID))){\n        const carToSend = await getState().folderPage.ArrayFolders.find(f => f._id == folderId);\n        await adminApi.updateFolderName(folderId,carToSend);\n    }\n}\nexport const setCarToFolderThunk = (folderId: string,carId:number):ThunkType => async (dispatch,getState) =>{\n    let newId = uuid.v4();\n    let car = {id: newId, number: carId};\n    if(dispatch(actions.setCarToTheFolder(folderId, car))) {\n        const carToSend = await getState().folderPage.ArrayFolders.find(f => f._id == folderId);\n        await adminApi.updateFolderName(folderId,carToSend);\n    }\n}\nexport const setCarFromDB = ():ThunkType => async (dispatch,getState) =>{\n    const car = await adminApi.getGoods()\n    dispatch(actions.setFromDB(car));\n}\nexport const addNewFolder = (data:any):ThunkType => async (dispatch,getState) =>{\n    const car = await adminApi.addNewFolder(data);\n    dispatch(actions.addNewFolder(car));\n}\nexport const chnageNameFolderThunk = (folderId:string,folderName:string):ThunkType => async (dispatch,getState) =>{\n    if(dispatch(actions.changeName(folderId,folderName))){\n        const car = await getState().folderPage.ArrayFolders.find(f => f._id == folderId);\n        await adminApi.updateFolderName(folderId,car);\n    }\n}\nexport const deleteFolderX = (id:string):ThunkType => async (dispatch,getState) =>{\n    await adminApi.deleteFolder(id);\n    await dispatch(setCarFromDB());\n}\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>","/Users/iqura/web_storm_projects/avto/client/src/Redux/reducers/showPageReducer.ts",["78","79"],"import {BaseThunkType, InferActionsTypes} from \"../Redux-store\";\n\ninterface infoType {\n    id: number,\n    number: number\n}\n\nlet initialState = {\n    MainNumberURL:'' as string | number,\n}\ntype InitialState = typeof initialState;\nexport const showReducer = (state=initialState, action:ActionsTypes):InitialState =>{\n\n    switch (action.type) {\n        case 'newURL':\n            return{\n                ...state,\n                MainNumberURL: action.url\n            }\n        case 'initProgram':\n            return{\n                ...state,\n                MainNumberURL:JSON.parse(localStorage.getItem('mainURL') || \"\"),\n            }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    changeUrl: (url:string | number) => ({type: 'newURL', url} as const),\n    setInitializeProgram: () => ({type: 'initProgram',} as const),\n}\n\n\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>","/Users/iqura/web_storm_projects/avto/client/src/UI/FIRST_PAGE/MainPage.tsx",["80","81","82","83","84","85","86"],"import React, {useEffect, useRef, useState} from \"react\";\nimport {Redirect, useHistory} from \"react-router-dom\";\nimport {actions} from \"../../Redux/reducers/showPageReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {ShowImgInRow} from \"./ShowImgInRow\";\nimport {AppStateType} from \"../../Redux/Redux-store\";\nimport {adminApi} from \"../../Api/Api\";\nimport {setCarFromDB} from \"../../Redux/reducers/folderPageReducer\";\nimport Folder from \"../Folder/Folder\";\nimport {useForm} from \"react-hook-form\";\n\nexport const MainPage: React.FC<{}> = () => {\n    const dispatch = useDispatch();\n    const [yes, setYes] = useState(false);\n    const [CarAvaible, setCarAvaible] = useState(false);\n    const history = useHistory();\n    useEffect(() => {\n        dispatch(setCarFromDB())\n        if (JSON.parse(localStorage.getItem('mainURL') || \"\")) {\n            dispatch(actions.setInitializeProgram());\n            setCarAvaible(true);\n        }\n    }, []);\n\n    let val = '';\n    let ref = useRef<HTMLInputElement>(null);\n\n    const sendInfo = () => {\n        dispatch(actions.changeUrl(val));\n        if (ref.current && ref) ref.current.value = '';\n        setYes(true);\n        localStorage.setItem('mainURL', JSON.stringify(val));\n    }\n    const seeValue = (e: React.ChangeEvent<HTMLInputElement>) => {\n        val = e.target.value;\n    }\n    const {register, handleSubmit} = useForm({shouldUseNativeValidation: true});\n    const onSubmit = async (data: any) => {\n        if(data.favShow === 'Array'){\n            history.push({\n                pathname: `/show/array/${data.number}`\n            });\n        }else{\n            history.push({\n                pathname: `/show/${data.number}`\n            });\n        }\n    };\n    if (yes) return <Redirect to={\"/show\"}/>\n    return (\n        <>\n            <form className='Car_app' onSubmit={handleSubmit(onSubmit)}>\n                <input type=\"text\" placeholder='type a number' {...register(\"number\")}/>\n                <div className='radio_buttons'>\n                <label htmlFor=\"got\">\n                    <input\n                        {...register('favShow', {required: true})}\n                        type=\"radio\"\n                        name=\"favShow\"\n                        value=\"oneCar\"\n                        className=\"form-check-input\"\n                        id=\"got\"\n                    />{' '}\n                    <span>Одна машина</span>\n                </label>\n                <label htmlFor=\"breadking-bad\">\n                    <input defaultChecked={true}\n                        {...register('favShow', {required: true})}\n\n                        type=\"radio\"\n                        name=\"favShow\"\n                        value=\"Array\"\n                        className=\"form-check-input\"\n                        id=\"breadking-bad\"\n                    />\n                    <span>Список машин</span>\n                </label>\n                </div>\n                <button>Check</button>\n                <div>Info about Cars</div>\n            </form>\n            {CarAvaible &&\n                <div className='Align_NIW'>\n                    <Folder/>\n                </div>\n            }\n\n        </>\n    );\n}\n","/Users/iqura/web_storm_projects/avto/client/src/UI/Header/Header.tsx",["87"],"import {NavLink} from \"react-router-dom\";\nimport './header.css';\nimport {useSelector} from \"react-redux\";\nimport React from \"react\";\nimport {AppStateType} from \"../../Redux/Redux-store\";\n\nexport const Header: React.FC<{}> = () =>{\n    const counter = useSelector<AppStateType>((state)  => state.folderPage.ArrayFolders.length);\n    return (\n        <header className=\"site-header\">\n            <div className=\"wrapper site-header__wrapper\">\n                <div className=\"site-header__start\">\n                    <a href=\"#\" className=\"brand\">Car's photos</a>\n                </div>\n                <div className=\"site-header__middle\">\n                    <nav className=\"nav\">\n                        <ul className=\"nav__wrapper\">\n                            <li className=\"nav__item\"><NavLink activeClassName=\"active\" to=\"/*\">Find Car</NavLink></li>\n                            <li className=\"nav__item\"><NavLink activeClassName=\"active\" to='/show' href=\"\">Check Car</NavLink></li>\n                            <li className=\"nav__item\"><NavLink activeClassName=\"active\" to='/folder' href=\"\">Folders</NavLink></li>\n                        </ul>\n                    </nav>\n                </div>\n                <div className=\"site-header__end\">\n                    Folders: {counter}\n                </div>\n            </div>\n        </header>\n    )\n}\n","/Users/iqura/web_storm_projects/avto/client/src/UI/Folder/folderInfo.tsx",["88","89"],"import React, {useEffect, useState} from 'react';\nimport {useParams} from \"react-router-dom\";\nimport {AppStateType} from \"../../Redux/Redux-store\";\nimport {useSelector} from \"react-redux\";\nimport {ShowImgInRow} from \"../FIRST_PAGE/ShowImgInRow\";\nimport './folder.css';\nimport {actions} from \"../../Redux/reducers/folderPageReducer\";\n\ninterface PropsType {\n\n}\ninterface paramType {\n    id: string\n}\nconst FolderInfo:React.FC<PropsType> = (props) => {\n    const {id} = useParams<paramType>();\n    const state = useSelector( (state:AppStateType) => state.folderPage.ArrayFolders);\n    let res = state.find( q => q._id === id);\n    return (\n        <div className='Align_NIW'>\n            {\n                res && res.Cars.map( m => {\n                return <ShowImgInRow url={m.number} deleteNew={actions.deleteId} folderID={id} productID={m.id}/>;\n            })}\n        </div>\n    );\n};\n\nexport default FolderInfo;","/Users/iqura/web_storm_projects/avto/client/src/UI/FIRST_PAGE/SearchingCar.tsx",["90","91"],"import React, {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Redirect, useParams} from \"react-router-dom\";\nimport {actions} from \"../../Redux/reducers/showPageReducer\";\nimport {AppStateType} from \"../../Redux/Redux-store\";\nimport {useForm} from \"react-hook-form\";\nimport {setCarToFolderThunk} from \"../../Redux/reducers/folderPageReducer\";\nlet imgNotFound ='https://clients.cylindo.com/viewer/3.x/v3.0/documentation/img/not_found.gif';\n\nexport const SearchingCar: React.FC<{}> = () => {\n    const {id} = useParams<{id:string}>();\n\n    let numberMain:number | string= useSelector((state:AppStateType) => state.showPage.MainNumberURL);\n    const foldersName = useSelector( (state:AppStateType) => state.folderPage.ArrayFolders);\n    let SortedCars = foldersName.slice(0);\n    SortedCars.sort(function(a,b) {\n        return b.Cars.length - a.Cars.length;\n    });\n    const dispatch = useDispatch();\n    const { register, handleSubmit } = useForm({ shouldUseNativeValidation: true });\n    const onSubmit = async (data:any) => {dispatch(setCarToFolderThunk(data.folders, Number(inx)));};\n    if(id) numberMain = id;\n    const [inx, setInx] = useState<number | string>(numberMain);\n    const [error, setError] = useState(false);\n    useEffect(() => {\n        dispatch(actions.setInitializeProgram());\n        setInx(numberMain);\n    },[numberMain]);\n    let x;\n    const changeMinus = () => {\n        x = Number(inx) - 1;\n        setInx(x);\n        localStorage.setItem('mainURL', JSON.stringify(x));\n    }\n    const changePlus = () => {\n        x = Number(inx) + 1;\n        setInx(x);\n        localStorage.setItem('mainURL', JSON.stringify(x));\n    }\n    let baseUrl = `https://cdn3.riastatic.com/photosnew/auto/photo/__${inx}f.jpg`;\n\n    if (error) return <Redirect to='/404'/>\n    return (\n        <>\n            <form className='Car_app' onSubmit={handleSubmit(onSubmit)} >\n\n                <img className='Car_app_IMG' src={inx ? baseUrl : imgNotFound} />\n                <div className='Car_app_align_button'>\n                    <button type='button' onClick={() => changeMinus()}>Left</button>\n                    <button type=\"submit\" >Add</button>\n                    <button type='button' onClick={() => changePlus()}>Right</button>\n                </div>\n                <div className='findNewCar'>\n                    <button type='button' onClick={() => setError(true)}>Find Another Car</button>\n                    <select className='Car_Folder_selector' {...register(\"folders\")}>\n                        {SortedCars.map( m=> {\n                            return  <option value={m._id}>{m.nameOfFolder}</option>\n                        })}\n\n                    </select>\n\n                </div>\n            </form>\n        </>\n    );\n}","/Users/iqura/web_storm_projects/avto/client/src/UI/Folder/Folder.tsx",["92","93","94","95"],"import React, {useRef, useState} from 'react';\nimport './folder.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/Redux-store\";\nimport {useHistory, useParams} from \"react-router-dom\";\nimport {\n    actions,\n    addNewFolder,\n    chnageNameFolderThunk,\n     deleteFolderX,\n    setCarFromDB\n} from \"../../Redux/reducers/folderPageReducer\";\nimport * as uuid from 'uuid';\nimport {useForm} from \"react-hook-form\";\n\nconst Folder = () => {\n    const history = useHistory();\n    const location = history.location.pathname\n    const dispatch = useDispatch();\n    const cars = useSelector((state: AppStateType) => state.folderPage.ArrayFolders);\n    if(cars.length===0) dispatch(setCarFromDB())\n    let SortedCars = cars.slice(0);\n    SortedCars.sort(function(a,b) {\n        return b.Cars.length - a.Cars.length;\n    });\n    const {register, handleSubmit,getValues} = useForm({mode: \"onBlur\"});\n    const [show, setShow] = useState('0');\n    let cool = '';\n    const folder = require(\"./../../img/folder.png\");\n    const nextPage = (id: string | number) => {\n        history.push(`/folder/${id}`);\n    }\n\n    const creatFolder = (folderName: string) => {\n        let newId = uuid.v4();\n        let newFolder = {\n            mainImg: '',\n            nameOfFolder: folderName + ' - ' + newId.slice(0, 4),\n            Cars: [],\n        }\n        dispatch(addNewFolder(newFolder));\n\n    }\n    const onSubmit = () => {\n        const formValues = getValues();\n        if(formValues.status.length >=1 && formValues.status.length<=99){\n            dispatch(chnageNameFolderThunk(cool,formValues.status));\n            setShow('0')\n        }\n    }\n    const deleteFolder = (id:string) =>{\n        dispatch(deleteFolderX(id));\n    }\n    return (\n        <div className='MainBlockWrapper'>\n            {\n                SortedCars.map(m => {\n                    return (<div className='Block_Wrapper' onClick={() => nextPage(m._id)}>\n\n                            <div className='Block_content'>\n                                <span className='Block_Center'>{m.Cars.length}</span>\n                                <img className='Block_content-img' src={folder} alt=\"\"/>\n                                {\n                                    show !== m._id && <div onClick={(e) => {\n                                        e.stopPropagation();\n                                        setShow(m._id)\n                                    }}>{m.nameOfFolder}</div>\n                                }\n                                <div onClick={(e) => {\n                                    e.stopPropagation()\n                                }}>\n                                    <form onBlur={onSubmit}>\n                                        {\n\n                                            show === m._id &&\n                                            <input className={'inputEdit'} {...register('status', { required: true})} autoFocus={true} defaultValue={m.nameOfFolder}\n                                                   onBlur={() => {\n                                                       cool = (m._id)\n                                                   }}/>\n\n                                        }\n                                    </form>\n                                </div>\n                                <div>\n                                <button className='deleteButtonFolder' type='button' onClick={ (e) => {e.stopPropagation(); deleteFolder(m._id); }}>Delete</button>\n                                </div>\n                            </div>\n\n                        </div>\n\n                    )\n                })\n            }\n            {location === '/folder' &&\n                <div className='Block_Wrapper' onClick={() => creatFolder('new folder')}>\n\n                    <div className='Block_content'>\n                        <div className='Circle'>\n                            <span className='Block_Center-add'>+</span>\n                        </div>\n                        <div className='Minus'>Add Folder</div>\n                    </div>\n\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default Folder;","/Users/iqura/web_storm_projects/avto/client/src/UI/FIRST_PAGE/ShowImgInRow.tsx",[],"/Users/iqura/web_storm_projects/avto/client/src/Api/Api.tsx",[],"/Users/iqura/web_storm_projects/avto/client/src/UI/Preloader/Preloader.tsx",[],"/Users/iqura/web_storm_projects/avto/client/src/UI/show_array/ShowArray.tsx",["96","97","98"],"import React, {useState} from 'react';\nimport './showarray.css'\nimport {useHistory, useParams} from \"react-router-dom\";\nimport CarImg from \"./CarImg\";\nimport {useForm} from \"react-hook-form\";\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/Redux-store\";\nexport let folderX ='';\nconst ShowArray = () => {\n    const {id} = useParams<{id:string}>();\n    const [folder, setFolder] = useState<string>();\n    const history = useHistory();\n    let len = 0;\n    const queryString = require('query-string');\n    const {filter} = queryString.parse(history.location.search);\n    if(!filter) history.push({\n        pathname: `/show/array/${id}`,\n        search: `filter=10`\n    })\n    len = Number(id)+Number(filter);\n    let i:number;\n    let q = [];\n    for(i = Number(id) ; i<len ;i++) q.push(i);\n\n\n    const { register, handleSubmit } = useForm();\n    const foldersName = useSelector( (state:AppStateType) => state.folderPage.ArrayFolders);\n    let SortedCars = foldersName.slice(0);\n    SortedCars.sort(function(a,b) {\n        return b.Cars.length - a.Cars.length;\n    });\n    return (<>\n        <div className='flew_row'>\n        <select className='select_car' {...register(\"filter\")} onChange={(e)=>history.push({\n            pathname: `/show/array/${id}`,\n            search: `filter=${e.target.value}`\n        })}>\n            <option value=\"10\">10</option>\n            <option value=\"25\">25</option>\n            <option value=\"50\">50</option>\n            <option value=\"75\">75</option>\n            <option value=\"100\">100</option>\n            <option value=\"200\">200</option>\n            <option value=\"500\">500</option>\n        </select>\n        <select className='select_folder' {...register(\"filter2\")}  onChange={(e)=> folderX=(e.target.value)}>\n            <option value=\"none\" selected disabled hidden>Select an Option</option>\n            {SortedCars.map( m=> {\n                return  <option value={m._id}>{m.nameOfFolder}</option>\n            })}\n        </select>\n        </div>\n        <div className='Show_Cars'>\n            {q.map(m=> <CarImg id={Number(m)}/>)}\n        </div>\n</>);\n};\n\nexport default ShowArray;","/Users/iqura/web_storm_projects/avto/client/src/UI/show_array/CarImg.tsx",[],{"ruleId":"99","severity":1,"message":"100","line":35,"column":69,"nodeType":"101","messageId":"102","endLine":35,"endColumn":71},{"ruleId":"99","severity":1,"message":"103","line":82,"column":84,"nodeType":"101","messageId":"102","endLine":82,"endColumn":86},{"ruleId":"99","severity":1,"message":"103","line":90,"column":84,"nodeType":"101","messageId":"102","endLine":90,"endColumn":86},{"ruleId":"99","severity":1,"message":"103","line":104,"column":78,"nodeType":"101","messageId":"102","endLine":104,"endColumn":80},{"ruleId":"104","severity":1,"message":"105","line":3,"column":11,"nodeType":"106","messageId":"107","endLine":3,"endColumn":19},{"ruleId":"104","severity":1,"message":"108","line":38,"column":6,"nodeType":"106","messageId":"107","endLine":38,"endColumn":15},{"ruleId":"104","severity":1,"message":"109","line":4,"column":22,"nodeType":"106","messageId":"107","endLine":4,"endColumn":33},{"ruleId":"104","severity":1,"message":"110","line":5,"column":9,"nodeType":"106","messageId":"107","endLine":5,"endColumn":21},{"ruleId":"104","severity":1,"message":"111","line":6,"column":9,"nodeType":"106","messageId":"107","endLine":6,"endColumn":21},{"ruleId":"104","severity":1,"message":"112","line":7,"column":9,"nodeType":"106","messageId":"107","endLine":7,"endColumn":17},{"ruleId":"113","severity":1,"message":"114","line":23,"column":8,"nodeType":"115","endLine":23,"endColumn":10,"suggestions":"116"},{"ruleId":"104","severity":1,"message":"117","line":28,"column":11,"nodeType":"106","messageId":"107","endLine":28,"endColumn":19},{"ruleId":"104","severity":1,"message":"118","line":34,"column":11,"nodeType":"106","messageId":"107","endLine":34,"endColumn":19},{"ruleId":"119","severity":1,"message":"120","line":13,"column":21,"nodeType":"121","endLine":13,"endColumn":51},{"ruleId":"104","severity":1,"message":"122","line":1,"column":16,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},{"ruleId":"104","severity":1,"message":"123","line":1,"column":27,"nodeType":"106","messageId":"107","endLine":1,"endColumn":35},{"ruleId":"113","severity":1,"message":"114","line":28,"column":7,"nodeType":"115","endLine":28,"endColumn":19,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":47,"column":17,"nodeType":"121","endLine":47,"endColumn":82},{"ruleId":"104","severity":1,"message":"127","line":1,"column":16,"nodeType":"106","messageId":"107","endLine":1,"endColumn":22},{"ruleId":"104","severity":1,"message":"128","line":5,"column":21,"nodeType":"106","messageId":"107","endLine":5,"endColumn":30},{"ruleId":"104","severity":1,"message":"129","line":7,"column":5,"nodeType":"106","messageId":"107","endLine":7,"endColumn":12},{"ruleId":"104","severity":1,"message":"130","line":26,"column":22,"nodeType":"106","messageId":"107","endLine":26,"endColumn":34},{"ruleId":"104","severity":1,"message":"131","line":11,"column":12,"nodeType":"106","messageId":"107","endLine":11,"endColumn":18},{"ruleId":"104","severity":1,"message":"132","line":11,"column":20,"nodeType":"106","messageId":"107","endLine":11,"endColumn":29},{"ruleId":"104","severity":1,"message":"130","line":26,"column":23,"nodeType":"106","messageId":"107","endLine":26,"endColumn":35},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","@typescript-eslint/no-unused-vars","'infoType' is defined but never used.","Identifier","unusedVar","'ThunkType' is defined but never used.","'useSelector' is defined but never used.","'ShowImgInRow' is defined but never used.","'AppStateType' is defined but never used.","'adminApi' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["133"],"'sendInfo' is assigned a value but never used.","'seeValue' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","'useState' is defined but never used.",["134"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'useRef' is defined but never used.","'useParams' is defined but never used.","'actions' is defined but never used.","'handleSubmit' is assigned a value but never used.","'folder' is assigned a value but never used.","'setFolder' is assigned a value but never used.",{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [dispatch]",{"range":"139","text":"140"},"Update the dependencies array to be: [dispatch, numberMain]",{"range":"141","text":"142"},[958,960],"[dispatch]",[1380,1392],"[dispatch, numberMain]"]